
mod TEST-PLS-MATCHING is
  pr MMATCHING .
  pr PLS-MM .
endm

set trace off .

---- test-0
match  < Server:Oid : EClass | eStructuralFeatures : (In@Server:Oid, Out@Server:Oid, Oids1:Set{Oid}), Atts1:AttributeSet >
  <=?
       < machine@devsmm : EClass | name : "Machine", eSuperTypes : positionedEl@devsmm,
                                eStructuralFeatures : (pt@machine@devsmm, 
                                                       defectiverate@machine@devsmm, 
                                                       in@machine@devsmm,
                                                       out@machine@devsmm) > .  

---- test-1
red mmatch(
    'TEST-PLS-MATCHING,
    < machine@devsmm : EClass | name : "Machine", eSuperTypes : positionedEl@devsmm,
                                eStructuralFeatures : (pt@machine@devsmm, 
                                                       defectiverate@machine@devsmm, 
                                                       in@machine@devsmm,
                                                       out@machine@devsmm) >,
    < Server:Oid : EClass | eStructuralFeatures : (In@Server:Oid, Out@Server:Oid, Oids1:Set{Oid}), Atts1:AttributeSet >) .
    

red metaMatch(mod 'TEST-PLS-MATCHING is
  nil
  sorts 'Assignment ; 'Attr ; 'AttrSet ; 'Attribute ; 'AttributeName ; 'AttributeSet ; 'Bag ; 'BasicType ; 'Bool
    ; 'Bound ; 'Char ; 'Cid ; 'Collection ; 'Condition ; 'Configuration ; 'ConfigurationBeingMixed ; 'Constant ;
    'Context ; 'DecFloat ; 'EAttribute ; 'EClass ; 'EClassifier ; 'EModelElement ; 'ENamedElement ; 'EReference
    ; 'EStructuralFeature ; 'ETypedElement ; 'EmptyCommaList ; 'EmptyTypeSet ; 'Enum ; 'EqCondition ; 'Equation
    ; 'EquationSet ; 'FModule ; 'FTheory ; 'FindResult ; 'FiniteFloat ; 'Float ; 'GTermList ; 'GroundTerm ;
    'GroundTermList ; 'Header ; 'Hook ; 'HookList ; 'Import ; 'ImportList ; 'Int ; 'Kind ; 'KindSet ; 'MatchPair
    ; 'MatchPair? ; 'Maybe`{AttributeName`} ; 'MembAx ; 'MembAxSet ; 'Model ; 'Module ; 'ModuleExpression ; 'Msg
    ; 'Nat ; 'NatList ; 'NeCTermList ; 'NeGroundTermList ; 'NeHookList ; 'NeKindSet ; 'NeNatList ;
    'NeParameterDeclList ; 'NeParameterList ; 'NeQidList ; 'NeQidSet ; 'NeSet`{Oid`} ; 'NeSortSet ; 'NeTermList
    ; 'NeTypeList ; 'NeTypeSet ; 'NzInt ; 'NzNat ; 'NzRat ; 'Object ; 'OclAny ; 'OclInvalid ; 'OclType ;
    'OclVoid ; 'Oid ; 'OpDecl ; 'OpDeclSet ; 'OpMapping ; 'OpMappingSet ; 'OpName ; 'OrderedSet ; 'ParameterDecl
    ; 'ParameterDeclList ; 'ParameterList ; 'Portal ; 'PosRat ; 'PrintOption ; 'PrintOptionSet ; 'Qid ; 'QidList
    ; 'QidSet ; 'Rat ; 'ReferenceName ; 'Renaming ; 'RenamingSet ; 'Result4Tuple ; 'Result4Tuple? ; 'ResultPair
    ; 'ResultPair? ; 'ResultTriple ; 'ResultTriple? ; 'Rule ; 'RuleSet ; 'SModule ; 'STheory ; 'Sequence ; 'Set
    ; 'Set`{Oid`} ; 'Sort ; 'SortMapping ; 'SortMappingSet ; 'SortSet ; 'String ; 'StructuralFeatureName ;
    'SubsortDecl ; 'SubsortDeclSet ; 'Substitution ; 'Substitution? ; 'Term ; 'TermList ; 'TermQid ; 'Trace ;
    'Trace? ; 'TraceStep ; 'Tuple ; 'Type ; 'Type? ; 'TypeList ; 'TypeListSet ; 'TypeSet ; 'UnificandPair ;
    'UnificationPair ; 'UnificationPair? ; 'UnificationProblem ; 'UnificationTriple ; 'UnificationTriple? ;
    'Variable ; 'Variant ; 'Variant? ; 'View ; 'Zero .
  subsort 'Assignment < 'Substitution .
  subsort 'Attr < 'AttrSet .
  subsort 'Attribute < 'AttributeSet .
  subsort 'AttributeName < 'Maybe`{AttributeName`} .
  subsort 'AttributeName < 'StructuralFeatureName .
  subsort 'Bag < 'Collection .
  subsort 'BasicType < 'OclAny .
  subsort 'Bool < 'BasicType .
  subsort 'Char < 'String .
  subsort 'Collection < 'OclAny .
  subsort 'Configuration < 'ConfigurationBeingMixed .
  subsort 'Constant < 'GroundTerm .
  subsort 'Constant < 'TermQid .
  subsort 'Context < 'NeCTermList .
  subsort 'EAttribute < 'EStructuralFeature .
  subsort 'EClass < 'EClassifier .
  subsort 'EClassifier < 'ENamedElement .
  subsort 'EModelElement < 'Cid .
  subsort 'ENamedElement < 'EModelElement .
  subsort 'EReference < 'EStructuralFeature .
  subsort 'EStructuralFeature < 'ETypedElement .
  subsort 'ETypedElement < 'ENamedElement .
  subsort 'EmptyCommaList < 'GroundTermList .
  subsort 'EmptyCommaList < 'ParameterList .
  subsort 'EmptyTypeSet < 'KindSet .
  subsort 'EmptyTypeSet < 'SortSet .
  subsort 'Enum < 'OclAny .
  subsort 'EqCondition < 'Condition .
  subsort 'Equation < 'EquationSet .
  subsort 'FModule < 'SModule .
  subsort 'FTheory < 'STheory .
  subsort 'FiniteFloat < 'Float .
  subsort 'Float < 'BasicType .
  subsort 'GroundTerm < 'NeGroundTermList .
  subsort 'GroundTerm < 'Term .
  subsort 'GroundTermList < 'TermList .
  subsort 'Hook < 'NeHookList .
  subsort 'Import < 'ImportList .
  subsort 'Int < 'Rat .
  subsort 'Kind < 'NeKindSet .
  subsort 'Kind < 'Type .
  subsort 'KindSet < 'TypeSet .
  subsort 'MatchPair < 'MatchPair? .
  subsort 'MembAx < 'MembAxSet .
  subsort 'Model < 'Configuration .
  subsort 'Msg < 'Configuration .
  subsort 'Nat < 'Bound .
  subsort 'Nat < 'FindResult .
  subsort 'Nat < 'Int .
  subsort 'Nat < 'NeNatList .
  subsort 'NeCTermList < 'GTermList .
  subsort 'NeGroundTermList < 'GroundTermList .
  subsort 'NeGroundTermList < 'NeTermList .
  subsort 'NeHookList < 'HookList .
  subsort 'NeKindSet < 'KindSet .
  subsort 'NeKindSet < 'NeTypeSet .
  subsort 'NeNatList < 'NatList .
  subsort 'NeParameterDeclList < 'ParameterDeclList .
  subsort 'NeParameterList < 'ParameterList .
  subsort 'NeQidList < 'QidList .
  subsort 'NeQidSet < 'QidSet .
  subsort 'NeSet`{Oid`} < 'Set`{Oid`} .
  subsort 'NeSortSet < 'NeTypeSet .
  subsort 'NeSortSet < 'SortSet .
  subsort 'NeTermList < 'TermList .
  subsort 'NeTypeList < 'NeQidList .
  subsort 'NeTypeList < 'TypeList .
  subsort 'NeTypeSet < 'NeQidSet .
  subsort 'NeTypeSet < 'TypeSet .
  subsort 'NzInt < 'Int .
  subsort 'NzInt < 'NzRat .
  subsort 'NzNat < 'Nat .
  subsort 'NzNat < 'NzInt .
  subsort 'NzNat < 'PosRat .
  subsort 'NzRat < 'Rat .
  subsort 'Object < 'Configuration .
  subsort 'OclAny < 'OclType .
  subsort 'OclType < 'OclInvalid .
  subsort 'OclVoid < 'Bag .
  subsort 'OclVoid < 'BasicType .
  subsort 'OclVoid < 'Bool .
  subsort 'OclVoid < 'Collection .
  subsort 'OclVoid < 'Enum .
  subsort 'OclVoid < 'Float .
  subsort 'OclVoid < 'Oid .
  subsort 'OclVoid < 'OrderedSet .
  subsort 'OclVoid < 'Rat .
  subsort 'OclVoid < 'Sequence .
  subsort 'OclVoid < 'Set .
  subsort 'OclVoid < 'String .
  subsort 'Oid < 'NeSet`{Oid`} .
  subsort 'Oid < 'OclAny .
  subsort 'OpDecl < 'OpDeclSet .
  subsort 'OpMapping < 'OpMappingSet .
  subsort 'OrderedSet < 'Collection .
  subsort 'ParameterDecl < 'NeParameterDeclList .
  subsort 'Portal < 'Configuration .
  subsort 'PosRat < 'NzRat .
  subsort 'PrintOption < 'PrintOptionSet .
  subsort 'Qid < 'Header .
  subsort 'Qid < 'ModuleExpression .
  subsort 'Qid < 'NeQidList .
  subsort 'Qid < 'NeQidSet .
  subsort 'Rat < 'BasicType .
  subsort 'ReferenceName < 'StructuralFeatureName .
  subsort 'Renaming < 'RenamingSet .
  subsort 'Result4Tuple < 'Result4Tuple? .
  subsort 'ResultPair < 'ResultPair? .
  subsort 'ResultTriple < 'ResultTriple? .
  subsort 'Rule < 'RuleSet .
  subsort 'SModule < 'Module .
  subsort 'STheory < 'Module .
  subsort 'Sequence < 'Collection .
  subsort 'Set < 'Collection .
  subsort 'Set`{Oid`} < 'Set .
  subsort 'Sort < 'NeParameterList .
  subsort 'Sort < 'NeSortSet .
  subsort 'Sort < 'Type .
  subsort 'SortMapping < 'SortMappingSet .
  subsort 'SortSet < 'TypeSet .
  subsort 'String < 'BasicType .
  subsort 'SubsortDecl < 'SubsortDeclSet .
  subsort 'Substitution < 'Substitution? .
  subsort 'Term < 'NeTermList .
  subsort 'TermList < 'GTermList .
  subsort 'TermQid < 'Qid .
  subsort 'TermQid < 'Term .
  subsort 'Trace < 'Trace? .
  subsort 'TraceStep < 'Trace .
  subsort 'Type < 'NeTypeList .
  subsort 'Type < 'NeTypeSet .
  subsort 'Type < 'Qid .
  subsort 'Type < 'Type? .
  subsort 'TypeList < 'QidList .
  subsort 'TypeList < 'TypeListSet .
  subsort 'TypeSet < 'QidSet .
  subsort 'TypeSet < 'TypeListSet .
  subsort 'UnificandPair < 'UnificationProblem .
  subsort 'UnificationPair < 'UnificationPair? .
  subsort 'UnificationTriple < 'UnificationTriple? .
  subsort 'Variable < 'TermQid .
  subsort 'Variant < 'Variant? .
  subsort 'Zero < 'Nat .
  op '$card : 'QidSet 'Nat -> 'Nat [none] .
  op '$card : 'Set`{Oid`} 'Nat -> 'Nat [none] .
  op '$diff : 'QidSet 'QidSet 'QidSet -> 'QidSet [none] .
  op '$diff : 'Set`{Oid`} 'Set`{Oid`} 'Set`{Oid`} -> 'Set`{Oid`} [none] .
  op '$intersect : 'QidSet 'QidSet 'QidSet -> 'QidSet [none] .
  op '$intersect : 'Set`{Oid`} 'Set`{Oid`} 'Set`{Oid`} -> 'Set`{Oid`} [none] .
  op '$reverse : 'NatList 'NatList -> 'NatList [none] .
  op '$reverse : 'QidList 'QidList -> 'QidList [none] .
  op '$size : 'NatList 'Nat -> 'Nat [none] .
  op '$size : 'QidList 'Nat -> 'Nat [none] .
  op '* : nil -> 'Nat [none] .
  op '-F_ : 'FiniteFloat -> 'FiniteFloat [special(
    id-hook('FloatOpSymbol, '-) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op '-F_ : 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, '-) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op '-I_ : 'Int -> 'Int [special(
    id-hook('MinusSymbol, nil) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '-I_ : 'NzInt -> 'NzInt [special(
    id-hook('MinusSymbol, nil) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '-I_ : 'NzNat -> 'NzInt [ctor special(
    id-hook('MinusSymbol, nil) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '-I_ : 'NzRat -> 'NzRat [special(
    id-hook('MinusSymbol, nil) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '-I_ : 'Rat -> 'Rat [special(
    id-hook('MinusSymbol, nil) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '0 : nil -> 'Zero [ctor] .
  op '<> : nil -> 'Portal [ctor] .
  op '<Floats> : nil -> 'FiniteFloat [special(
    id-hook('FloatSymbol, nil))] .
  op '<Floats> : nil -> 'Float [special(
    id-hook('FloatSymbol, nil))] .
  op '<Qids> : nil -> 'Constant [special(
    id-hook('QuotedIdentifierSymbol, 'constantQid))] .
  op '<Qids> : nil -> 'Kind [special(
    id-hook('QuotedIdentifierSymbol, 'kindQid))] .
  op '<Qids> : nil -> 'Qid [special(
    id-hook('QuotedIdentifierSymbol, nil))] .
  op '<Qids> : nil -> 'Sort [special(
    id-hook('QuotedIdentifierSymbol, 'sortQid))] .
  op '<Qids> : nil -> 'Variable [special(
    id-hook('QuotedIdentifierSymbol, 'variableQid))] .
  op '<Strings> : nil -> 'Char [special(
    id-hook('StringSymbol, nil))] .
  op '<Strings> : nil -> 'String [special(
    id-hook('StringSymbol, nil))] .
  op '<_:_|_> : 'Oid 'Cid 'AttributeSet -> 'Object [ctor object format('nr '!++i 'o '! 'o 'd 'r--i 'd)] .
  op '<_`,_> : 'Nat 'Nat -> 'Tuple [ctor] .
  op '<_`,_`,_> : 'Int 'String 'Int -> 'DecFloat [ctor] .
  op 'Boolean : nil -> 'OclType [none] .
  op 'EAttribute : nil -> 'EAttribute [ctor] .
  op 'EClass : nil -> 'EClass [ctor] .
  op 'EReference : nil -> 'EReference [ctor] .
  op 'Int : nil -> 'OclType [none] .
  op '_&_ : 'Int 'Int -> 'Int [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_&_ : 'Nat 'Int -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_*F_ : 'Float 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, '*) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op '_*N_ : 'Int 'Int -> 'Int [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_*N_ : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_*N_ : 'NzInt 'NzInt -> 'NzInt [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_*N_ : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_*N_ : 'NzRat 'NzRat -> 'NzRat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_*N_ : 'PosRat 'PosRat -> 'PosRat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_*N_ : 'Rat 'Rat -> 'Rat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '*) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_*`(_`) : 'ModuleExpression 'RenamingSet -> 'ModuleExpression [ctor prec(39) format('d 'd 's 'n++i 'n--i
    'd)] .
  op '_++_ : 'String 'String -> 'String [special(
    id-hook('StringOpSymbol, '+) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char))] .
  op '_+F_ : 'Float 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, '+) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op '_+N_ : 'Int 'Int -> 'Int [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_+N_ : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_+N_ : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_+N_ : 'PosRat 'Nat -> 'PosRat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_+N_ : 'PosRat 'PosRat -> 'PosRat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_+N_ : 'Rat 'Rat -> 'Rat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '+) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_+_ : 'ModuleExpression 'ModuleExpression -> 'ModuleExpression [assoc comm ctor] .
  op '_-F_ : 'Float 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, '-) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op '_-N_ : 'Int 'Int -> 'Int [special(
    id-hook('NumberOpSymbol, '-) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_-N_ : 'Rat 'Rat -> 'Rat [special(
    id-hook('NumberOpSymbol, '-) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_//_ : 'NzInt 'NzNat -> 'NzRat [ctor special(
    id-hook('DivisionSymbol, nil) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_//_ : 'NzNat 'NzNat -> 'PosRat [ctor special(
    id-hook('DivisionSymbol, nil) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_//_ : 'NzRat 'NzRat -> 'NzRat [special(
    id-hook('DivisionSymbol, nil) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_//_ : 'PosRat 'PosRat -> 'PosRat [special(
    id-hook('DivisionSymbol, nil) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_//_ : 'Rat 'NzRat -> 'Rat [special(
    id-hook('DivisionSymbol, nil) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_/F_ : '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('FloatOpSymbol, '/) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op '_/\_ : 'Condition 'Condition -> 'Condition [assoc ctor id('nil.EqCondition) prec(73)] .
  op '_/\_ : 'EqCondition 'EqCondition -> 'EqCondition [assoc ctor id('nil.EqCondition) prec(73)] .
  op '_/\_ : 'UnificationProblem 'UnificationProblem -> 'UnificationProblem [assoc comm ctor prec(73)] .
  op '_::_ : 'Sort 'ModuleExpression -> 'ParameterDecl [none] .
  op '_:=_ : 'Term 'Term -> 'EqCondition [ctor prec(71)] .
  op '_:_ : 'StructuralFeatureName 'OclType -> 'Attribute [ctor prec(20) gather('& '&)] .
  op '_:_ : 'Term 'Sort -> 'EqCondition [ctor prec(71)] .
  op '_;_ : 'EmptyTypeSet 'EmptyTypeSet -> 'EmptyTypeSet [assoc comm ctor id('none.EmptyTypeSet) prec(43)] .
  op '_;_ : 'KindSet 'KindSet -> 'KindSet [assoc comm ctor id('none.EmptyTypeSet) prec(43)] .
  op '_;_ : 'NeKindSet 'KindSet -> 'NeKindSet [assoc comm ctor id('none.EmptyTypeSet) prec(43)] .
  op '_;_ : 'NeQidSet 'QidSet -> 'NeQidSet [assoc comm ctor id('none.EmptyTypeSet) prec(43)] .
  op '_;_ : 'NeSortSet 'SortSet -> 'NeSortSet [assoc comm ctor id('none.EmptyTypeSet) prec(43)] .
  op '_;_ : 'NeTypeSet 'TypeSet -> 'NeTypeSet [assoc comm ctor id('none.EmptyTypeSet) prec(43)] .
  op '_;_ : 'QidSet 'QidSet -> 'QidSet [assoc comm ctor id('none.EmptyTypeSet) prec(43)] .
  op '_;_ : 'SortSet 'SortSet -> 'SortSet [assoc comm ctor id('none.EmptyTypeSet) prec(43)] .
  op '_;_ : 'Substitution 'Substitution -> 'Substitution [assoc comm ctor id('none.Substitution) prec(65)] .
  op '_;_ : 'TypeListSet 'TypeListSet -> 'TypeListSet [assoc comm ctor id('none.EmptyTypeSet) prec(43)] .
  op '_;_ : 'TypeSet 'TypeSet -> 'TypeSet [assoc comm ctor id('none.EmptyTypeSet) prec(43)] .
  op '_<-_ : 'Variable 'Term -> 'Assignment [ctor prec(63) format('nt 'd 'd 'd)] .
  op '_<<_ : 'Int 'Nat -> 'Int [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_<=F_ : 'Float 'Float -> 'Bool [special(
    id-hook('FloatOpSymbol, '<=) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_<=N_ : 'Int 'Int -> 'Bool [special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_<=N_ : 'Nat 'Nat -> 'Bool [special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_<=N_ : 'Rat 'Rat -> 'Bool [special(
    id-hook('NumberOpSymbol, '<=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_<F_ : 'Float 'Float -> 'Bool [special(
    id-hook('FloatOpSymbol, '<) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_<N_ : 'Int 'Int -> 'Bool [special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_<N_ : 'Nat 'Nat -> 'Bool [special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_<N_ : 'Rat 'Rat -> 'Bool [special(
    id-hook('NumberOpSymbol, '<) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'false.Bool) 
    term-hook('notEqualTerm, 'true.Bool))] .
  op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil) 
    term-hook('equalTerm, 'true.Bool) 
    term-hook('notEqualTerm, 'false.Bool))] .
  op '_=>_ : 'Term 'Term -> 'Condition [ctor prec(71)] .
  op '_=?_ : 'Term 'Term -> 'UnificandPair [ctor prec(71)] .
  op '_=_ : 'Term 'Term -> 'EqCondition [ctor prec(71)] .
  op '_=`[_`]_ : 'Float 'FiniteFloat 'Float -> 'Bool [prec(51) format('d 'd 'd 'd 'd 's 'd)] .
  op '_>=F_ : 'Float 'Float -> 'Bool [special(
    id-hook('FloatOpSymbol, '>=) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_>=N_ : 'Int 'Int -> 'Bool [special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_>=N_ : 'Nat 'Nat -> 'Bool [special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_>=N_ : 'Rat 'Rat -> 'Bool [special(
    id-hook('NumberOpSymbol, '>=) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_>>_ : 'Int 'Nat -> 'Int [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_>F_ : 'Float 'Float -> 'Bool [special(
    id-hook('FloatOpSymbol, '>) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_>N_ : 'Int 'Int -> 'Bool [special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_>N_ : 'Nat 'Nat -> 'Bool [special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_>N_ : 'Rat 'Rat -> 'Bool [special(
    id-hook('NumberOpSymbol, '>) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_\_ : 'QidSet 'QidSet -> 'QidSet [gather('E 'e)] .
  op '_\_ : 'Set`{Oid`} 'Set`{Oid`} -> 'Set`{Oid`} [gather('E 'e)] .
  op '_^F_ : '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('FloatOpSymbol, '^) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op '_^_ : 'Int 'Nat -> 'Int [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_^_ : 'NzInt 'Nat -> 'NzInt [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_^_ : 'NzRat 'Nat -> 'NzRat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_^_ : 'PosRat 'Nat -> 'PosRat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_^_ : 'Rat 'Nat -> 'Rat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '__ : 'AttrSet 'AttrSet -> 'AttrSet [assoc comm ctor id('none.AttrSet)] .
  op '__ : 'Configuration 'Configuration -> 'Configuration [assoc comm ctor config id('none.Configuration)] .
  op '__ : 'EquationSet 'EquationSet -> 'EquationSet [assoc comm ctor id('none.EquationSet) format('d 'ni 'd)] .
  op '__ : 'HookList 'HookList -> 'HookList [assoc ctor id('nil.HookList)] .
  op '__ : 'HookList 'NeHookList -> 'NeHookList [assoc ctor id('nil.HookList)] .
  op '__ : 'ImportList 'ImportList -> 'ImportList [assoc ctor id('nil.ImportList) format('d 'ni 'd)] .
  op '__ : 'MembAxSet 'MembAxSet -> 'MembAxSet [assoc comm ctor id('none.MembAxSet) format('d 'ni 'd)] .
  op '__ : 'NatList 'NatList -> 'NatList [assoc ctor id('nil.NatList) prec(25)] .
  op '__ : 'NatList 'NeNatList -> 'NeNatList [assoc ctor id('nil.NatList) prec(25)] .
  op '__ : 'NeHookList 'HookList -> 'NeHookList [assoc ctor id('nil.HookList)] .
  op '__ : 'NeNatList 'NatList -> 'NeNatList [assoc ctor id('nil.NatList) prec(25)] .
  op '__ : 'NeQidList 'QidList -> 'NeQidList [assoc ctor id('nil.TypeList) prec(25)] .
  op '__ : 'NeTypeList 'TypeList -> 'NeTypeList [assoc ctor id('nil.TypeList) prec(25)] .
  op '__ : 'OpDeclSet 'OpDeclSet -> 'OpDeclSet [assoc comm ctor id('none.OpDeclSet) format('d 'ni 'd)] .
  op '__ : 'OpMappingSet 'OpMappingSet -> 'OpMappingSet [assoc comm ctor id('none.OpMappingSet) format('d 'ni
    'd)] .
  op '__ : 'PrintOptionSet 'PrintOptionSet -> 'PrintOptionSet [assoc comm ctor id('none.PrintOptionSet)] .
  op '__ : 'QidList 'NeQidList -> 'NeQidList [assoc ctor id('nil.TypeList) prec(25)] .
  op '__ : 'QidList 'QidList -> 'QidList [assoc ctor id('nil.TypeList) prec(25)] .
  op '__ : 'RuleSet 'RuleSet -> 'RuleSet [assoc comm ctor id('none.RuleSet) format('d 'ni 'd)] .
  op '__ : 'SortMappingSet 'SortMappingSet -> 'SortMappingSet [assoc comm ctor id('none.SortMappingSet) format(
    'd 'ni 'd)] .
  op '__ : 'SubsortDeclSet 'SubsortDeclSet -> 'SubsortDeclSet [assoc comm ctor id('none.SubsortDeclSet) format(
    'd 'ni 'd)] .
  op '__ : 'Trace 'Trace -> 'Trace [assoc ctor id('nil.Trace) format('d 'n 'd)] .
  op '__ : 'TypeList 'NeTypeList -> 'NeTypeList [assoc ctor id('nil.TypeList) prec(25)] .
  op '__ : 'TypeList 'TypeList -> 'TypeList [assoc ctor id('nil.TypeList) prec(25)] .
  op '_`,_ : 'AttributeSet 'AttributeSet -> 'AttributeSet [assoc comm ctor id('none.AttributeSet)] .
  op '_`,_ : 'EmptyCommaList 'EmptyCommaList -> 'EmptyCommaList [assoc ctor id('empty.EmptyCommaList) prec(121)
    gather('e 'E)] .
  op '_`,_ : 'GTermList 'GTermList -> 'GTermList [assoc ctor id('empty.EmptyCommaList) prec(121) gather('e 'E)]
    .
  op '_`,_ : 'GroundTermList 'GroundTermList -> 'GroundTermList [assoc ctor id('empty.EmptyCommaList) prec(121)
    gather('e 'E)] .
  op '_`,_ : 'GroundTermList 'NeGroundTermList -> 'NeGroundTermList [assoc ctor id('empty.EmptyCommaList) prec(
    121) gather('e 'E)] .
  op '_`,_ : 'NeCTermList 'TermList -> 'NeCTermList [assoc ctor id('empty.EmptyCommaList) prec(121) gather('e
    'E)] .
  op '_`,_ : 'NeGroundTermList 'GroundTermList -> 'NeGroundTermList [assoc ctor id('empty.EmptyCommaList) prec(
    121) gather('e 'E)] .
  op '_`,_ : 'NeParameterDeclList 'ParameterDeclList -> 'NeParameterDeclList [assoc ctor id(
    'nil.ParameterDeclList) prec(121)] .
  op '_`,_ : 'NeParameterList 'ParameterList -> 'NeParameterList [assoc ctor id('empty.EmptyCommaList) prec(121)
    gather('e 'E)] .
  op '_`,_ : 'NeSet`{Oid`} 'Set`{Oid`} -> 'NeSet`{Oid`} [assoc comm ctor id('empty.Set`{Oid`}) prec(121) format(
    'd 'r 'os 'd)] .
  op '_`,_ : 'NeTermList 'TermList -> 'NeTermList [assoc ctor id('empty.EmptyCommaList) prec(121) gather('e 'E)]
    .
  op '_`,_ : 'ParameterDeclList 'NeParameterDeclList -> 'NeParameterDeclList [assoc ctor id(
    'nil.ParameterDeclList) prec(121)] .
  op '_`,_ : 'ParameterDeclList 'ParameterDeclList -> 'ParameterDeclList [assoc ctor id('nil.ParameterDeclList)
    prec(121)] .
  op '_`,_ : 'ParameterList 'NeParameterList -> 'NeParameterList [assoc ctor id('empty.EmptyCommaList) prec(121)
    gather('e 'E)] .
  op '_`,_ : 'ParameterList 'ParameterList -> 'ParameterList [assoc ctor id('empty.EmptyCommaList) prec(121)
    gather('e 'E)] .
  op '_`,_ : 'RenamingSet 'RenamingSet -> 'RenamingSet [assoc comm ctor prec(43) format('d 'd 'ni 'd)] .
  op '_`,_ : 'Set`{Oid`} 'Set`{Oid`} -> 'Set`{Oid`} [assoc comm ctor id('empty.Set`{Oid`}) prec(121) format('d
    'r 'os 'd)] .
  op '_`,_ : 'TermList 'NeCTermList -> 'NeCTermList [assoc ctor id('empty.EmptyCommaList) prec(121) gather('e
    'E)] .
  op '_`,_ : 'TermList 'NeTermList -> 'NeTermList [assoc ctor id('empty.EmptyCommaList) prec(121) gather('e 'E)]
    .
  op '_`,_ : 'TermList 'TermList -> 'TermList [assoc ctor id('empty.EmptyCommaList) prec(121) gather('e 'E)] .
  op '_`[_`] : 'Qid 'NeCTermList -> 'Context [ctor] .
  op '_`[_`] : 'Qid 'NeGroundTermList -> 'GroundTerm [ctor] .
  op '_`[_`] : 'Qid 'NeTermList -> 'Term [ctor] .
  op '_`{_`} : 'ModuleExpression 'ParameterList -> 'ModuleExpression [ctor prec(37)] .
  op '_`{_`} : 'Qid 'ParameterDeclList -> 'Header [ctor] .
  op '_and-then_ : 'Bool 'Bool -> 'Bool [strat(1 0) prec(55) gather('e 'E)] .
  op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
  op '_divides_ : 'NzInt 'Int -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_divides_ : 'NzRat 'Rat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_geq_ : 'String 'String -> 'Bool [special(
    id-hook('StringOpSymbol, '>=) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_gt_ : 'String 'String -> 'Bool [special(
    id-hook('StringOpSymbol, '>) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
  op '_in_ : 'Oid 'Set`{Oid`} -> 'Bool [none] .
  op '_in_ : 'Qid 'QidSet -> 'Bool [none] .
  op '_leq_ : 'String 'String -> 'Bool [special(
    id-hook('StringOpSymbol, '<=) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_lt_ : 'String 'String -> 'Bool [special(
    id-hook('StringOpSymbol, '<) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op '_nxor_ : 'Int 'Int -> 'Int [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_nxor_ : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'xor) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_or-else_ : 'Bool 'Bool -> 'Bool [strat(1 0) prec(59) gather('e 'E)] .
  op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
  op '_psubset_ : 'QidSet 'QidSet -> 'Bool [none] .
  op '_psubset_ : 'Set`{Oid`} 'Set`{Oid`} -> 'Bool [none] .
  op '_quo_ : 'Int 'NzInt -> 'Int [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_quo_ : 'PosRat 'PosRat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_quo_ : 'Rat 'NzRat -> 'Int [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_remF_ : '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('FloatOpSymbol, 'rem) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op '_rem_ : 'Int 'NzInt -> 'Int [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_rem_ : 'Rat 'NzRat -> 'Rat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_subset_ : 'QidSet 'QidSet -> 'Bool [none] .
  op '_subset_ : 'Set`{Oid`} 'Set`{Oid`} -> 'Bool [none] .
  op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
  op '_|N_ : 'Int 'Int -> 'Int [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_|N_ : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_|N_ : 'NzInt 'Int -> 'NzInt [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '_|N_ : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, '|) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op '`[_`] : 'Qid -> 'Module [none] .
  op '`[`] : nil -> 'Context [ctor] .
  op '`{_`,_`,_`,_`} : 'Term 'Type 'Substitution 'Context -> 'Result4Tuple [ctor] .
  op '`{_`,_`,_`} : 'Substitution 'Substitution 'Nat -> 'UnificationTriple [ctor] .
  op '`{_`,_`,_`} : 'Term 'Substitution 'Nat -> 'Variant [ctor] .
  op '`{_`,_`,_`} : 'Term 'Type 'Rule -> 'TraceStep [ctor] .
  op '`{_`,_`,_`} : 'Term 'Type 'Substitution -> 'ResultTriple [ctor] .
  op '`{_`,_`} : 'Substitution 'Context -> 'MatchPair [ctor] .
  op '`{_`,_`} : 'Substitution 'Nat -> 'UnificationPair [ctor] .
  op '`{_`,_`} : 'Term 'Type -> 'ResultPair [ctor] .
  op 'abs : 'Int -> 'Nat [special(
    id-hook('NumberOpSymbol, 'abs) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'abs : 'NzInt -> 'NzNat [special(
    id-hook('NumberOpSymbol, 'abs) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'abs : 'NzRat -> 'PosRat [special(
    id-hook('NumberOpSymbol, 'abs) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'abs : 'Rat -> 'Rat [special(
    id-hook('NumberOpSymbol, 'abs) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'absF : 'FiniteFloat -> 'FiniteFloat [special(
    id-hook('FloatOpSymbol, 'abs) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'absF : 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'abs) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'acos : '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[FindResult`,NatList`,Bound`,OclInvalid`] [
    special(
    id-hook('FloatOpSymbol, 'acos) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'ambiguity : 'ResultPair 'ResultPair -> 'ResultPair? [ctor] .
  op 'anyType : nil -> 'Type? [ctor] .
  op 'append : 'NatList 'NatList -> 'NatList [none] .
  op 'append : 'NatList 'NeNatList -> 'NeNatList [none] .
  op 'append : 'NeNatList 'NatList -> 'NeNatList [none] .
  op 'append : 'NeQidList 'QidList -> 'NeQidList [none] .
  op 'append : 'QidList 'NeQidList -> 'NeQidList [none] .
  op 'append : 'QidList 'QidList -> 'QidList [none] .
  op 'ascii : 'Char -> 'Nat [special(
    id-hook('StringOpSymbol, 'ascii) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'asin : '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[FindResult`,NatList`,Bound`,OclInvalid`] [
    special(
    id-hook('FloatOpSymbol, 'asin) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'assemble@devsmm : nil -> 'Oid [ctor] .
  op 'assoc : nil -> 'Attr [ctor] .
  op 'atan : 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'atan) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'atan : 'Float 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'atan) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'capacity@limitedContainer@devsmm : nil -> 'Oid [ctor] .
  op 'cardinality : 'ReferenceName -> 'Tuple [none] .
  op 'ceilingF : 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'ceiling) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'ceilingR : 'PosRat -> 'NzNat [none] .
  op 'ceilingR : 'Rat -> 'Int [none] .
  op 'ceq_=_if_`[_`]. : 'Term 'Term 'EqCondition 'AttrSet -> 'Equation [ctor format('d 'd 'd 'd 'd 'd 's 'd 'd
    's 'd)] .
  op 'char : '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[FindResult`,NatList`,Bound`,OclInvalid`] [
    special(
    id-hook('StringOpSymbol, 'char) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'cmb_:_if_`[_`]. : 'Term 'Sort 'EqCondition 'AttrSet -> 'MembAx [ctor format('d 'd 'd 'd 'd 'd 's 'd 'd 's
    'd)] .
  op 'comm : nil -> 'Attr [ctor] .
  op 'completeName : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaCompleteName) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'config : nil -> 'Attr [ctor] .
  op 'container@devsmm : nil -> 'Oid [ctor] .
  op 'containment : nil -> 'AttributeName [ctor] .
  op 'conveyor@devsmm : nil -> 'Oid [ctor] .
  op 'cos : 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'cos) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'crl_=>_if_`[_`]. : 'Term 'Term 'Condition 'AttrSet -> 'Rule [ctor format('d 'd 'd 'd 'd 'd 's 'd 'd 's
    'd)] .
  op 'ctor : nil -> 'Attr [ctor] .
  op 'decFloat : 'Float 'Nat -> 'DecFloat [special(
    id-hook('StringOpSymbol, 'decFloat) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat) 
    op-hook('decFloatSymbol, '<_`,_`,_>, 'Int 'String 'Int, 'DecFloat))] .
  op 'defective@part@devsmm : nil -> 'Oid [ctor] .
  op 'defectiverate@machine@devsmm : nil -> 'Oid [ctor] .
  op 'delete : 'Oid 'Set`{Oid`} -> 'Set`{Oid`} [none] .
  op 'delete : 'Qid 'QidSet -> 'QidSet [none] .
  op 'downTerm : 'Term 'Universal -> 'Universal [poly(2 0) special(
    id-hook('MetaLevelOpSymbol, 'metaDownTerm) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'eOpposite : nil -> 'ReferenceName [ctor] .
  op 'eStructuralFeatures : nil -> 'ReferenceName [ctor] .
  op 'eSuperTypes : nil -> 'ReferenceName [ctor] .
  op 'eType : nil -> 'ReferenceName [ctor] .
  op 'els@plant@devsmm : nil -> 'Oid [ctor] .
  op 'empty : nil -> 'EmptyCommaList [ctor] .
  op 'empty : nil -> 'GroundTermList [ctor] .
  op 'empty : nil -> 'Set`{Oid`} [ctor] .
  op 'eq_=_`[_`]. : 'Term 'Term 'AttrSet -> 'Equation [ctor format('d 'd 'd 'd 's 'd 'd 's 'd)] .
  op 'exp : 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'exp) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'extending_. : 'ModuleExpression -> 'Import [ctor] .
  op 'failure : nil -> 'Result4Tuple? [ctor] .
  op 'failure : nil -> 'ResultPair? [ctor] .
  op 'failure : nil -> 'ResultTriple? [ctor] .
  op 'failure : nil -> 'Trace? [ctor] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
  op 'find : 'String 'String 'Nat -> 'FindResult [special(
    id-hook('StringOpSymbol, 'find) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('notFoundTerm, 'notFound.FindResult))] .
  op 'first : 'Tuple -> 'Nat [none] .
  op 'flat : nil -> 'PrintOption [ctor] .
  op 'flatten : 'Model -> 'Model [none] .
  op 'flatten : 'Model 'Model -> 'Model [none] .
  op 'floorF : 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'floor) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'floorR : 'PosRat -> 'Nat [none] .
  op 'floorR : 'Rat -> 'Int [none] .
  op 'fmod_is_sorts_.____endfm : 'Header 'ImportList 'SortSet 'SubsortDeclSet 'OpDeclSet 'MembAxSet 'EquationSet
    -> 'FModule [ctor gather('& '& '& '& '& '& '&) format('d 'd 's 'n++i 'ni 'd 'd 'ni 'ni 'ni 'ni 'n--i 'd)] .
  op 'format : 'QidList -> 'Attr [ctor] .
  op 'format : nil -> 'PrintOption [ctor] .
  op 'frac : 'Rat -> 'Rat [none] .
  op 'front : 'NeNatList -> 'NatList [none] .
  op 'front : 'NeQidList -> 'QidList [none] .
  op 'frozen : 'NeNatList -> 'Attr [ctor] .
  op 'fth_is_sorts_.____endfth : 'Qid 'ImportList 'SortSet 'SubsortDeclSet 'OpDeclSet 'MembAxSet 'EquationSet ->
    'FTheory [ctor gather('& '& '& '& '& '& '&) format('d 'd 'd 'n++i 'ni 'd 'd 'ni 'ni 'ni 'ni 'n--i 'd)] .
  op 'gather : 'QidList -> 'Attr [ctor] .
  op 'gcd : 'Int 'Int -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'gcd : 'NzInt 'Int -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'gcd : 'NzRat 'Rat -> 'PosRat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'gcd : 'Rat 'Rat -> 'Rat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'genHandle@devsmm : nil -> 'Oid [ctor] .
  op 'genHead@devsmm : nil -> 'Oid [ctor] .
  op 'generator@devsmm : nil -> 'Oid [ctor] .
  op 'getContext : 'MatchPair -> 'Context [none] .
  op 'getContext : 'Result4Tuple -> 'Context [none] .
  op 'getEqs : 'Module -> 'EquationSet [none] .
  op 'getFrom : 'View -> 'ModuleExpression [none] .
  op 'getImports : 'Module -> 'ImportList [none] .
  op 'getKind : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaGetKind) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'getKinds : '`[Module`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaGetKinds) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'getMbs : 'Module -> 'MembAxSet [none] .
  op 'getName : 'Constant -> 'Qid [none] .
  op 'getName : 'Module -> 'Qid [none] .
  op 'getName : 'Variable -> 'Qid [none] .
  op 'getName : 'View -> 'Qid [none] .
  op 'getOpMappings : 'View -> 'OpMappingSet [none] .
  op 'getOps : 'Module -> 'OpDeclSet [none] .
  op 'getRls : 'Module -> 'RuleSet [none] .
  op 'getSortMappings : 'View -> 'SortMappingSet [none] .
  op 'getSorts : 'Module -> 'SortSet [none] .
  op 'getSubsorts : 'Module -> 'SubsortDeclSet [none] .
  op 'getSubstitution : 'MatchPair -> 'Substitution [none] .
  op 'getSubstitution : 'Result4Tuple -> 'Substitution [none] .
  op 'getSubstitution : 'ResultTriple -> 'Substitution [none] .
  op 'getTerm : 'Result4Tuple -> 'Term [none] .
  op 'getTerm : 'ResultPair -> 'Term [none] .
  op 'getTerm : 'ResultTriple -> 'Term [none] .
  op 'getTo : 'View -> 'ModuleExpression [none] .
  op 'getType : 'Constant -> 'Type [none] .
  op 'getType : 'Result4Tuple -> 'Type [none] .
  op 'getType : 'ResultPair -> 'Type [none] .
  op 'getType : 'ResultTriple -> 'Type [none] .
  op 'getType : 'Variable -> 'Type [none] .
  op 'glbSorts : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaGlbSorts) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'hammer@devsmm : nil -> 'Oid [ctor] .
  op 'handle@devsmm : nil -> 'Oid [ctor] .
  op 'hasSuperTypes : 'AttributeSet 'Configuration -> 'Bool [none] .
  op 'head : 'NeNatList -> 'Nat [none] .
  op 'head : 'NeQidList -> 'Qid [none] .
  op 'head@devsmm : nil -> 'Oid [ctor] .
  op 'id : 'Term -> 'Attr [ctor] .
  op 'id-hook : 'Qid 'QidList -> 'Hook [ctor format('nssss 'd)] .
  op 'idem : nil -> 'Attr [ctor] .
  op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2 3 0) special(
    id-hook('BranchSymbol, nil) 
    term-hook('1, 'true.Bool) 
    term-hook('2, 'false.Bool))] .
  op 'in@machine@devsmm : nil -> 'Oid [ctor] .
  op 'including_. : 'ModuleExpression -> 'Import [ctor] .
  op 'insert : 'Oid 'Set`{Oid`} -> 'Set`{Oid`} [none] .
  op 'insert : 'Qid 'QidSet -> 'QidSet [none] .
  op 'intersection : 'QidSet 'QidSet -> 'QidSet [none] .
  op 'intersection : 'Set`{Oid`} 'Set`{Oid`} -> 'Set`{Oid`} [none] .
  op 'isContainment : 'ReferenceName -> 'Bool [none] .
  op 'isReference : 'StructuralFeatureName -> 'Bool [none] .
  op 'iter : nil -> 'Attr [ctor] .
  op 'label : 'Qid -> 'Attr [ctor] .
  op 'label_to_ : 'Qid 'Qid -> 'Renaming [ctor] .
  op 'last : 'NeNatList -> 'Nat [none] .
  op 'last : 'NeQidList -> 'Qid [none] .
  op 'lcm : 'Int 'Int -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'lcm : 'NzInt 'NzInt -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'lcm : 'NzRat 'NzRat -> 'PosRat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'lcm : 'Rat 'Rat -> 'Rat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'leastSort : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaLeastSort) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'left-id : 'Term -> 'Attr [ctor] .
  op 'length : 'String -> 'Nat [special(
    id-hook('StringOpSymbol, 'length) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'lesserSorts : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaLesserSorts) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'limitedContainer@devsmm : nil -> 'Oid [ctor] .
  op 'log : '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('FloatOpSymbol, 'log) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'lowerBound : nil -> 'AttributeName [ctor] .
  op 'machine@devsmm : nil -> 'Oid [ctor] .
  op 'max : 'Int 'Int -> 'Int [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'max : 'Nat 'Int -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'max : 'NzInt 'NzInt -> 'NzInt [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'max : 'NzNat 'Int -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'max : 'NzRat 'NzRat -> 'NzRat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'max : 'PosRat 'Rat -> 'PosRat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'max : 'Rat 'Rat -> 'Rat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'maxF : 'Float 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'max) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'maximalAritySet : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaMaximalAritySet) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'maximalSorts : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaMaximalSorts) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'mb_:_`[_`]. : 'Term 'Sort 'AttrSet -> 'MembAx [ctor format('d 'd 'd 'd 's 'd 'd 's 'd)] .
  op 'memo : nil -> 'Attr [ctor] .
  op 'metaApply : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[Substitution?`] '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[ResultTriple?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaApply) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaDisjointUnify : '`[Module`] '`[UnificationProblem`] '`[FindResult`,NatList`,Bound`,OclInvalid`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[UnificationTriple?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaDisjointUnify) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaFrewrite : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[ResultPair?`]
    [special(
    id-hook('MetaLevelOpSymbol, 'metaFrewrite) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaGetIrredundantVariant : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[Variant?`] [
    special(
    id-hook('MetaLevelOpSymbol, 'metaGetIrredundantVariant) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaGetVariant : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[Variant?`] [
    special(
    id-hook('MetaLevelOpSymbol, 'metaGetVariant) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaMatch : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] '`[Condition`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[Substitution?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaMatch) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaNarrow : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[ResultPair?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaNarrow2) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaNarrow : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[ResultTriple?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaNarrow) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaNormalize : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[ResultPair?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaNormalize) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaParse : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[ResultPair?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaParse) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaPrettyPrint : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [none] .
  op 'metaPrettyPrint : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[PrintOptionSet`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaPrettyPrint) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaReduce : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[ResultPair?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaReduce) 
    op-hook('qidSymbol, '<Qids>, nil, 'Qid) 
    op-hook('metaTermSymbol, '_`[_`], 'Qid 'NeGroundTermList, 'GroundTerm) 
    op-hook('metaArgSymbol, '_`,_, 'NeGroundTermList 'GroundTermList, 'NeGroundTermList) 
    op-hook('emptyTermListSymbol, 'empty, nil, 'GroundTermList) 
    op-hook('assignmentSymbol, '_<-_, 'Variable 'Term, 'Assignment) 
    op-hook('emptySubstitutionSymbol, 'none, nil, 'Substitution) 
    op-hook('substitutionSymbol, '_;_, 'Substitution 'Substitution, 'Substitution) 
    op-hook('holeSymbol, '`[`], nil, 'Context) 
    op-hook('headerSymbol, '_`{_`}, 'Qid 'ParameterDeclList, 'Header) 
    op-hook('parameterDeclSymbol, '_::_, 'Sort 'ModuleExpression, 'ParameterDecl) 
    op-hook('parameterDeclListSymbol, '_`,_, 'ParameterDeclList 'ParameterDeclList, 'ParameterDeclList) 
    op-hook('protectingSymbol, 'protecting_., 'ModuleExpression, 'Import) 
    op-hook('extendingSymbol, 'extending_., 'ModuleExpression, 'Import) 
    op-hook('includingSymbol, 'including_., 'ModuleExpression, 'Import) 
    op-hook('nilImportListSymbol, 'nil, nil, 'ImportList) 
    op-hook('importListSymbol, '__, 'ImportList 'ImportList, 'ImportList) 
    op-hook('emptySortSetSymbol, 'none, nil, 'QidSet) 
    op-hook('sortSetSymbol, '_;_, 'QidSet 'QidSet, 'QidSet) 
    op-hook('subsortSymbol, 'subsort_<_., 'Sort 'Sort, 'SubsortDecl) 
    op-hook('emptySubsortDeclSetSymbol, 'none, nil, 'SubsortDeclSet) 
    op-hook('subsortDeclSetSymbol, '__, 'SubsortDeclSet 'SubsortDeclSet, 'SubsortDeclSet) 
    op-hook('nilQidListSymbol, 'nil, nil, 'QidList) 
    op-hook('qidListSymbol, '__, 'QidList 'QidList, 'QidList) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('natListSymbol, '__, 'NatList 'NatList, 'NatList) 
    op-hook('unboundedSymbol, 'unbounded, nil, 'Bound) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('sortRenamingSymbol, 'sort_to_, 'Qid 'Qid, 'Renaming) 
    op-hook('opRenamingSymbol, 'op_to_`[_`], 'Qid 'Qid 'AttrSet, 'Renaming) 
    op-hook('opRenamingSymbol2, 'op_:_->_to_`[_`], 'Qid 'TypeList 'Type 'Qid 'AttrSet, 'Renaming) 
    op-hook('labelRenamingSymbol, 'label_to_, 'Qid 'Qid, 'Renaming) 
    op-hook('renamingSetSymbol, '_`,_, 'RenamingSet 'RenamingSet, 'RenamingSet) 
    op-hook('sumSymbol, '_+_, 'ModuleExpression 'ModuleExpression, 'ModuleExpression) 
    op-hook('renamingSymbol, '_*`(_`), 'ModuleExpression 'RenamingSet, 'ModuleExpression) 
    op-hook('instantiationSymbol, '_`{_`}, 'ModuleExpression 'ParameterList, 'ModuleExpression) 
    op-hook('termHookSymbol, 'term-hook, 'Qid 'Term, 'Hook) 
    op-hook('hookListSymbol, '__, 'HookList 'HookList, 'HookList) 
    op-hook('idHookSymbol, 'id-hook, 'Qid 'QidList, 'Hook) 
    op-hook('opHookSymbol, 'op-hook, 'Qid 'Qid 'QidList 'Qid, 'Hook) 
    op-hook('assocSymbol, 'assoc, nil, 'Attr) 
    op-hook('commSymbol, 'comm, nil, 'Attr) 
    op-hook('idemSymbol, 'idem, nil, 'Attr) 
    op-hook('iterSymbol, 'iter, nil, 'Attr) 
    op-hook('idSymbol, 'id, 'Term, 'Attr) 
    op-hook('leftIdSymbol, 'left-id, 'Term, 'Attr) 
    op-hook('rightIdSymbol, 'right-id, 'Term, 'Attr) 
    op-hook('stratSymbol, 'strat, 'NeNatList, 'Attr) 
    op-hook('memoSymbol, 'memo, nil, 'Attr) 
    op-hook('precSymbol, 'prec, 'Nat, 'Attr) 
    op-hook('gatherSymbol, 'gather, 'QidList, 'Attr) 
    op-hook('formatSymbol, 'format, 'QidList, 'Attr) 
    op-hook('ctorSymbol, 'ctor, nil, 'Attr) 
    op-hook('frozenSymbol, 'frozen, 'NeNatList, 'Attr) 
    op-hook('polySymbol, 'poly, 'NeNatList, 'Attr) 
    op-hook('configSymbol, 'config, nil, 'Attr) 
    op-hook('objectSymbol, 'object, nil, 'Attr) 
    op-hook('msgSymbol, 'msg, nil, 'Attr) 
    op-hook('specialSymbol, 'special, 'NeHookList, 'Attr) 
    op-hook('labelSymbol, 'label, 'Qid, 'Attr) 
    op-hook('metadataSymbol, 'metadata, 'String, 'Attr) 
    op-hook('owiseSymbol, 'owise, nil, 'Attr) 
    op-hook('variantAttrSymbol, 'variant, nil, 'Attr) 
    op-hook('nonexecSymbol, 'nonexec, nil, 'Attr) 
    op-hook('printSymbol, 'print, 'QidList, 'Attr) 
    op-hook('emptyAttrSetSymbol, 'none, nil, 'AttrSet) 
    op-hook('attrSetSymbol, '__, 'AttrSet 'AttrSet, 'AttrSet) 
    op-hook('opDeclSymbol, 'op_:_->_`[_`]., 'Qid 'TypeList 'Type 'AttrSet, 'OpDecl) 
    op-hook('opDeclSetSymbol, '__, 'OpDeclSet 'OpDeclSet, 'OpDeclSet) 
    op-hook('emptyOpDeclSetSymbol, 'none, nil, 'OpDeclSet) 
    op-hook('noConditionSymbol, 'nil, nil, 'EqCondition) 
    op-hook('equalityConditionSymbol, '_=_, 'Term 'Term, 'EqCondition) 
    op-hook('sortTestConditionSymbol, '_:_, 'Term 'Sort, 'EqCondition) 
    op-hook('matchConditionSymbol, '_:=_, 'Term 'Term, 'EqCondition) 
    op-hook('rewriteConditionSymbol, '_=>_, 'Term 'Term, 'Condition) 
    op-hook('conjunctionSymbol, '_/\_, 'EqCondition 'EqCondition, 'EqCondition) 
    op-hook('mbSymbol, 'mb_:_`[_`]., 'Term 'Sort 'AttrSet, 'MembAx) 
    op-hook('cmbSymbol, 'cmb_:_if_`[_`]., 'Term 'Sort 'EqCondition 'AttrSet, 'MembAx) 
    op-hook('emptyMembAxSetSymbol, 'none, nil, 'MembAxSet) 
    op-hook('membAxSetSymbol, '__, 'MembAxSet 'MembAxSet, 'MembAxSet) 
    op-hook('eqSymbol, 'eq_=_`[_`]., 'Term 'Term 'AttrSet, 'Equation) 
    op-hook('ceqSymbol, 'ceq_=_if_`[_`]., 'Term 'Term 'EqCondition 'AttrSet, 'Equation) 
    op-hook('emptyEquationSetSymbol, 'none, nil, 'EquationSet) 
    op-hook('equationSetSymbol, '__, 'EquationSet 'EquationSet, 'EquationSet) 
    op-hook('rlSymbol, 'rl_=>_`[_`]., 'Term 'Term 'AttrSet, 'Rule) 
    op-hook('crlSymbol, 'crl_=>_if_`[_`]., 'Term 'Term 'Condition 'AttrSet, 'Rule) 
    op-hook('emptyRuleSetSymbol, 'none, nil, 'RuleSet) 
    op-hook('ruleSetSymbol, '__, 'RuleSet 'RuleSet, 'RuleSet) 
    op-hook('fmodSymbol, 'fmod_is_sorts_.____endfm, 'Header 'ImportList 'SortSet 'SubsortDeclSet 'OpDeclSet
    'MembAxSet 'EquationSet, 'FModule) 
    op-hook('fthSymbol, 'fth_is_sorts_.____endfth, 'Qid 'ImportList 'SortSet 'SubsortDeclSet 'OpDeclSet
    'MembAxSet 'EquationSet, 'FTheory) 
    op-hook('modSymbol, 'mod_is_sorts_._____endm, 'Header 'ImportList 'SortSet 'SubsortDeclSet 'OpDeclSet
    'MembAxSet 'EquationSet 'RuleSet, 'SModule) 
    op-hook('thSymbol, 'th_is_sorts_._____endth, 'Qid 'ImportList 'SortSet 'SubsortDeclSet 'OpDeclSet 'MembAxSet
    'EquationSet 'RuleSet, 'STheory) 
    op-hook('sortMappingSymbol, 'sort_to_., 'Sort 'Sort, 'SortMapping) 
    op-hook('emptySortMappingSetSymbol, 'none, nil, 'SortMappingSet) 
    op-hook('sortMappingSetSymbol, '__, 'SortMappingSet 'SortMappingSet, 'SortMappingSet) 
    op-hook('opMappingSymbol, 'op_to_., 'Qid 'Qid, 'OpMapping) 
    op-hook('opSpecificMappingSymbol, 'op_:_->_to_., 'Qid 'TypeList 'Type 'Qid, 'OpMapping) 
    op-hook('opTermMappingSymbol, 'op_to`term_., 'Term 'Term, 'OpMapping) 
    op-hook('emptyOpMappingSetSymbol, 'none, nil, 'OpMappingSet) 
    op-hook('opMappingSetSymbol, '__, 'OpMappingSet 'OpMappingSet, 'OpMappingSet) 
    op-hook('viewSymbol, 'view_from_to_is__endv, 'Header 'ModuleExpression 'ModuleExpression 'SortMappingSet
    'OpMappingSet, 'View) 
    op-hook('anyTypeSymbol, 'anyType, nil, 'Type?) 
    op-hook('unificandPairSymbol, '_=?_, 'Term 'Term, 'UnificandPair) 
    op-hook('unificationConjunctionSymbol, '_/\_, 'UnificationProblem 'UnificationProblem, 'UnificationProblem) 
    op-hook('resultPairSymbol, '`{_`,_`}, 'Term 'Type, 'ResultPair) 
    op-hook('resultTripleSymbol, '`{_`,_`,_`}, 'Term 'Type 'Substitution, 'ResultTriple) 
    op-hook('result4TupleSymbol, '`{_`,_`,_`,_`}, 'Term 'Type 'Substitution 'Context, 'Result4Tuple) 
    op-hook('matchPairSymbol, '`{_`,_`}, 'Substitution 'Context, 'MatchPair) 
    op-hook('unificationPairSymbol, '`{_`,_`}, 'Substitution 'Nat, 'UnificationPair) 
    op-hook('unificationTripleSymbol, '`{_`,_`,_`}, 'Substitution 'Substitution 'Nat, 'UnificationTriple) 
    op-hook('variantSymbol, '`{_`,_`,_`}, 'Term 'Substitution 'Nat, 'Variant) 
    op-hook('traceStepSymbol, '`{_`,_`,_`}, 'Term 'Type 'Rule, 'TraceStep) 
    op-hook('nilTraceSymbol, 'nil, nil, 'Trace) 
    op-hook('traceSymbol, '__, 'Trace 'Trace, 'Trace) 
    op-hook('noParseSymbol, 'noParse, 'Nat, 'ResultPair?) 
    op-hook('ambiguitySymbol, 'ambiguity, 'ResultPair 'ResultPair, 'ResultPair?) 
    op-hook('failure2Symbol, 'failure, nil, 'ResultPair?) 
    op-hook('failure3Symbol, 'failure, nil, 'ResultTriple?) 
    op-hook('failure4Symbol, 'failure, nil, 'Result4Tuple?) 
    op-hook('noUnifierPairSymbol, 'noUnifier, nil, 'UnificationPair?) 
    op-hook('noUnifierTripleSymbol, 'noUnifier, nil, 'UnificationTriple?) 
    op-hook('noVariantSymbol, 'noVariant, nil, 'Variant?) 
    op-hook('noMatchSubstSymbol, 'noMatch, nil, 'Substitution?) 
    op-hook('noMatchPairSymbol, 'noMatch, nil, 'MatchPair?) 
    op-hook('failureTraceSymbol, 'failure, nil, 'Trace?) 
    op-hook('mixfixSymbol, 'mixfix, nil, 'PrintOption) 
    op-hook('withParensSymbol, 'with-parens, nil, 'PrintOption) 
    op-hook('flatSymbol, 'flat, nil, 'PrintOption) 
    op-hook('formatPrintOptionSymbol, 'format, nil, 'PrintOption) 
    op-hook('numberSymbol, 'number, nil, 'PrintOption) 
    op-hook('ratSymbol, 'rat, nil, 'PrintOption) 
    op-hook('emptyPrintOptionSetSymbol, 'none, nil, 'PrintOptionSet) 
    op-hook('printOptionSetSymbol, '__, 'PrintOptionSet 'PrintOptionSet, 'PrintOptionSet) 
    term-hook('trueTerm, 'true.Bool) 
    term-hook('falseTerm, 'false.Bool))] .
  op 'metaRewrite : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[ResultPair?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaRewrite) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaSearch : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] '`[Condition`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[ResultTriple?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaSearch) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaSearchPath : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] '`[Condition`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[Trace?`] [
    special(
    id-hook('MetaLevelOpSymbol, 'metaSearchPath) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaUnify : '`[Module`] '`[UnificationProblem`] '`[FindResult`,NatList`,Bound`,OclInvalid`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[UnificationPair?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaUnify) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaVariantDisjointUnify : '`[Module`] '`[UnificationProblem`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[UnificationTriple?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaVariantDisjointUnify) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaVariantUnify : '`[Module`] '`[UnificationProblem`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[UnificationPair?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaVariantUnify) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaXapply : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[Substitution?`] '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[Result4Tuple?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaXapply) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metaXmatch : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] '`[Condition`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[MatchPair?`] [special(
    id-hook('MetaLevelOpSymbol, 'metaXmatch) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'metadata : 'String -> 'Attr [ctor] .
  op 'min : 'Int 'Int -> 'Int [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'min : 'NzInt 'NzInt -> 'NzInt [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'min : 'NzRat 'NzRat -> 'NzRat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'min : 'PosRat 'PosRat -> 'PosRat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'min : 'Rat 'Rat -> 'Rat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  op 'minF : 'Float 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'min) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'minimalSorts : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaMinimalSorts) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'mixFeatures : 'Oid 'Set`{Oid`} 'Configuration -> 'ConfigurationBeingMixed [none] .
  op 'mixfix : nil -> 'PrintOption [ctor] .
  op 'mmatch : 'Qid 'Configuration 'Configuration -> 'Substitution? [none] .
  op 'modExp : '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('NumberOpSymbol, 'modExp) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'mod_is_sorts_._____endm : 'Header 'ImportList 'SortSet 'SubsortDeclSet 'OpDeclSet 'MembAxSet 'EquationSet
    'RuleSet -> 'SModule [ctor gather('& '& '& '& '& '& '& '&) format('d 'd 's 'n++i 'ni 'd 'd 'ni 'ni 'ni 'ni
    'ni 'n--i 'd)] .
  op 'msg : nil -> 'Attr [ctor] .
  op 'name : nil -> 'AttributeName [ctor] .
  op 'nil : nil -> 'EqCondition [ctor] .
  op 'nil : nil -> 'HookList [ctor] .
  op 'nil : nil -> 'ImportList [ctor] .
  op 'nil : nil -> 'NatList [ctor] .
  op 'nil : nil -> 'ParameterDeclList [ctor] .
  op 'nil : nil -> 'QidList [ctor] .
  op 'nil : nil -> 'Trace [ctor] .
  op 'nil : nil -> 'TypeList [ctor] .
  op 'noMatch : nil -> 'MatchPair? [ctor] .
  op 'noMatch : nil -> 'Substitution? [ctor] .
  op 'noParse : 'Nat -> 'ResultPair? [ctor] .
  op 'noUnifier : nil -> 'UnificationPair? [ctor] .
  op 'noUnifier : nil -> 'UnificationTriple? [ctor] .
  op 'noVariant : nil -> 'Variant? [ctor] .
  op 'none : nil -> 'AttrSet [ctor] .
  op 'none : nil -> 'AttributeSet [ctor] .
  op 'none : nil -> 'Configuration [ctor] .
  op 'none : nil -> 'EmptyTypeSet [ctor] .
  op 'none : nil -> 'EquationSet [ctor] .
  op 'none : nil -> 'MembAxSet [ctor] .
  op 'none : nil -> 'OpDeclSet [ctor] .
  op 'none : nil -> 'OpMappingSet [ctor] .
  op 'none : nil -> 'PrintOptionSet [ctor] .
  op 'none : nil -> 'QidSet [ctor] .
  op 'none : nil -> 'RuleSet [ctor] .
  op 'none : nil -> 'SortMappingSet [ctor] .
  op 'none : nil -> 'SubsortDeclSet [ctor] .
  op 'none : nil -> 'Substitution [ctor] .
  op 'nonexec : nil -> 'Attr [ctor] .
  op 'notFound : nil -> 'FindResult [ctor] .
  op 'not_ : 'Bool -> 'Bool [prec(53)] .
  op 'null : nil -> 'Maybe`{AttributeName`} [ctor] .
  op 'null : nil -> 'OclVoid [ctor] .
  op 'number : nil -> 'PrintOption [ctor] .
  op 'object : nil -> 'Attr [ctor] .
  op 'occurs : 'Nat 'NatList -> 'Bool [none] .
  op 'occurs : 'Qid 'QidList -> 'Bool [none] .
  op 'op-hook : 'Qid 'Qid 'QidList 'Qid -> 'Hook [ctor format('nssss 'd)] .
  op 'op_:_->_`[_`]. : 'Qid 'TypeList 'Type 'AttrSet -> 'OpDecl [ctor format('d 'd 'd 'd 'd 'd 's 'd 'd 's 'd)]
    .
  op 'op_:_->_to_. : 'Qid 'TypeList 'Type 'Qid -> 'OpMapping [ctor] .
  op 'op_:_->_to_`[_`] : 'Qid 'TypeList 'Type 'Qid 'AttrSet -> 'Renaming [ctor format('d 'd 'd 'd 'd 'd 'd 'd 's
    'd 'd 'd)] .
  op 'op_to_. : 'Qid 'Qid -> 'OpMapping [ctor] .
  op 'op_to_`[_`] : 'Qid 'Qid 'AttrSet -> 'Renaming [ctor format('d 'd 'd 'd 's 'd 'd 'd)] .
  op 'op_to`term_. : 'Term 'Term -> 'OpMapping [ctor] .
  op 'opposite : 'ReferenceName -> 'Maybe`{AttributeName`} [none] .
  op 'out@machine@devsmm : nil -> 'Oid [ctor] .
  op 'outParts@conveyor@devsmm : nil -> 'Oid [ctor] .
  op 'owise : nil -> 'Attr [ctor] .
  op 'part@devsmm : nil -> 'Oid [ctor] .
  op 'parts@container@devsmm : nil -> 'Oid [ctor] .
  op 'pi : nil -> 'FiniteFloat [none] .
  op 'plant@devsmm : nil -> 'Oid [ctor] .
  op 'plsmm : nil -> 'Model [ctor] .
  op 'poly : 'NeNatList -> 'Attr [ctor] .
  op 'positionedEl@devsmm : nil -> 'Oid [ctor] .
  op 'prec : 'Nat -> 'Attr [ctor] .
  op 'print : 'QidList -> 'Attr [ctor] .
  op 'protecting_. : 'ModuleExpression -> 'Import [ctor] .
  op 'pt@machine@devsmm : nil -> 'Oid [ctor] .
  op 'qid : '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('QuotedIdentifierOpSymbol, 'qid) 
    op-hook('quotedIdentifierSymbol, '<Qids>, nil, 'Qid) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char))] .
  op 'rat : 'FiniteFloat -> 'Rat [special(
    id-hook('FloatOpSymbol, 'rat) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    op-hook('divisionSymbol, '_//_, 'NzInt 'NzNat, 'NzRat))] .
  op 'rat : nil -> 'PrintOption [ctor] .
  op 'rat2float : 'Rat -> 'Float [special(
    id-hook('FloatOpSymbol, 'float) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    op-hook('divisionSymbol, '_//_, 'NzInt 'NzNat, 'NzRat))] .
  op 'reverse : 'NatList -> 'NatList [none] .
  op 'reverse : 'NeNatList -> 'NeNatList [none] .
  op 'reverse : 'NeQidList -> 'NeQidList [none] .
  op 'reverse : 'QidList -> 'QidList [none] .
  op 'rfind : 'String 'String 'Nat -> 'FindResult [special(
    id-hook('StringOpSymbol, 'rfind) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    term-hook('notFoundTerm, 'notFound.FindResult))] .
  op 'right-id : 'Term -> 'Attr [ctor] .
  op 'rl_=>_`[_`]. : 'Term 'Term 'AttrSet -> 'Rule [ctor format('d 'd 'd 'd 's 'd 'd 's 'd)] .
  op 'rtmm#param : nil -> 'Model [none] .
  op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil) 
    term-hook('zeroTerm, '0.Zero))] .
  op 'sameKind : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('MetaLevelOpSymbol, 'metaSameKind) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'second : 'Tuple -> 'Nat [none] .
  op 'sin : 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'sin) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'size : 'NatList -> 'Nat [none] .
  op 'size : 'NeNatList -> 'NzNat [none] .
  op 'size : 'NeQidList -> 'NzNat [none] .
  op 'size : 'QidList -> 'Nat [none] .
  op 'sortLeq : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('MetaLevelOpSymbol, 'metaSortLeq) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'sort_to_ : 'Qid 'Qid -> 'Renaming [ctor] .
  op 'sort_to_. : 'Sort 'Sort -> 'SortMapping [ctor] .
  op 'special : 'NeHookList -> 'Attr [ctor] .
  op 'sqrt : '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[FindResult`,NatList`,Bound`,OclInvalid`] [
    special(
    id-hook('FloatOpSymbol, 'sqrt) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'strat : 'NeNatList -> 'Attr [ctor] .
  op 'string : 'Float -> 'String [special(
    id-hook('StringOpSymbol, 'string) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'string : 'Qid -> 'String [special(
    id-hook('QuotedIdentifierOpSymbol, 'string) 
    op-hook('quotedIdentifierSymbol, '<Qids>, nil, 'Qid) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char))] .
  op 'string : '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('StringOpSymbol, 'string) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    op-hook('divisionSymbol, '_//_, 'NzInt 'NzNat, 'NzRat))] .
  op 'string2float : '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[FindResult`,NatList`,Bound`,OclInvalid`]
    [special(
    id-hook('StringOpSymbol, 'float) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'string2rat : '`[FindResult`,NatList`,Bound`,OclInvalid`] '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('StringOpSymbol, 'rat) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt) 
    op-hook('divisionSymbol, '_//_, 'NzInt 'NzNat, 'NzRat))] .
  op 'subsort_<_. : 'Sort 'Sort -> 'SubsortDecl [ctor] .
  op 'substr : 'String 'Nat 'Nat -> 'String [special(
    id-hook('StringOpSymbol, 'substr) 
    op-hook('stringSymbol, '<Strings>, nil, 'Char) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'tail : 'NeNatList -> 'NatList [none] .
  op 'tail : 'NeQidList -> 'QidList [none] .
  op 'tan : 'Float -> 'Float [special(
    id-hook('FloatOpSymbol, 'tan) 
    op-hook('floatSymbol, '<Floats>, nil, 'FiniteFloat))] .
  op 'term-hook : 'Qid 'Term -> 'Hook [ctor format('nssss 'd)] .
  op 'th_is_sorts_._____endth : 'Qid 'ImportList 'SortSet 'SubsortDeclSet 'OpDeclSet 'MembAxSet 'EquationSet
    'RuleSet -> 'STheory [ctor gather('& '& '& '& '& '& '& '&) format('d 'd 'd 'n++i 'ni 'd 'd 'ni 'ni 'ni 'ni
    'ni 'n--i 'd)] .
  op 'tray@devsmm : nil -> 'Oid [ctor] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
  op 'trunc : 'PosRat -> 'Nat [none] .
  op 'trunc : 'Rat -> 'Int [none] .
  op 'unbounded : nil -> 'Bound [ctor] .
  op 'union : 'NeQidSet 'QidSet -> 'NeQidSet [none] .
  op 'union : 'NeSet`{Oid`} 'Set`{Oid`} -> 'NeSet`{Oid`} [none] .
  op 'union : 'QidSet 'NeQidSet -> 'NeQidSet [none] .
  op 'union : 'QidSet 'QidSet -> 'QidSet [none] .
  op 'union : 'Set`{Oid`} 'NeSet`{Oid`} -> 'NeSet`{Oid`} [none] .
  op 'union : 'Set`{Oid`} 'Set`{Oid`} -> 'Set`{Oid`} [none] .
  op 'upEqs : '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[EquationSet`] [special(
    id-hook('MetaLevelOpSymbol, 'metaUpEqs) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'upImports : '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    -> '`[ImportList`] [special(
    id-hook('MetaLevelOpSymbol, 'metaUpImports) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'upMbs : '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[MembAxSet`] [special(
    id-hook('MetaLevelOpSymbol, 'metaUpMbs) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'upModule : '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[Module`] [special(
    id-hook('MetaLevelOpSymbol, 'metaUpModule) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'upOpDecls : '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[OpDeclSet`] [special(
    id-hook('MetaLevelOpSymbol, 'metaUpOpDecls) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'upRls : '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[RuleSet`] [special(
    id-hook('MetaLevelOpSymbol, 'metaUpRls) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'upSorts : '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] ->
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] [special(
    id-hook('MetaLevelOpSymbol, 'metaUpSorts) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'upSubsortDecls :
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`]
    '`[FindResult`,NatList`,Bound`,OclInvalid`] -> '`[SubsortDeclSet`] [special(
    id-hook('MetaLevelOpSymbol, 'metaUpSubsortDecls) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'upTerm : 'Universal -> 'Term [poly(1) special(
    id-hook('MetaLevelOpSymbol, 'metaUpTerm) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'upView : '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[View`] [special(
    id-hook('MetaLevelOpSymbol, 'metaUpView) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'upperBound : nil -> 'AttributeName [ctor] .
  op 'user@devsmm : nil -> 'Oid [ctor] .
  op 'variant : nil -> 'Attr [ctor] .
  op 'view_from_to_is__endv : 'Header 'ModuleExpression 'ModuleExpression 'SortMappingSet 'OpMappingSet -> 'View
    [ctor gather('& '& '& '& '&) format('d 'd 'd 'd 'd 'd 'd 'n++i 'ni 'n--i 'd)] .
  op 'wellFormed : 'Module -> 'Bool [special(
    id-hook('MetaLevelOpSymbol, 'metaWellFormedModule) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'wellFormed : '`[Module`]
    '`[QidSet`,QidList`,TypeListSet`,GTermList`,ParameterList`,Type?`,ModuleExpression`,Header`] ->
    '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('MetaLevelOpSymbol, 'metaWellFormedTerm) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'wellFormed : '`[Module`] '`[Substitution?`] -> '`[FindResult`,NatList`,Bound`,OclInvalid`] [special(
    id-hook('MetaLevelOpSymbol, 'metaWellFormedSubstitution) 
    op-hook('shareWith, 'metaReduce, 'Module 'QidSet, 'ResultPair?))] .
  op 'with-parens : nil -> 'PrintOption [ctor] .
  op '|_| : 'NeQidSet -> 'NzNat [none] .
  op '|_| : 'NeSet`{Oid`} -> 'NzNat [none] .
  op '|_| : 'QidSet -> 'Nat [none] .
  op '|_| : 'Set`{Oid`} -> 'Nat [none] .
  op '~_ : 'Int -> 'Int [special(
    id-hook('NumberOpSymbol, '~) 
    op-hook('succSymbol, 's_, 'Nat, 'NzNat) 
    op-hook('minusSymbol, '-I_, 'NzNat, 'NzInt))] .
  none
  eq 'pi.FiniteFloat = '3.1415926535897931.FiniteFloat [none] .
  eq 'plsmm.Model = '__['__['__['__['__['__['__['__['__['__['__['__['__['__['__['__['__['__['__['__['__['__['__[
    '__['<_:_|_>['hammer@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_['eSuperTypes.ReferenceName,
    'part@devsmm.Oid],'_:_['eStructuralFeatures.ReferenceName,'empty.Set`{Oid`}]],'_:_['name.AttributeName,
    '"Hammer".String]]],'<_:_|_>['handle@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_['eSuperTypes.ReferenceName,
    'part@devsmm.Oid],'_:_['eStructuralFeatures.ReferenceName,'empty.Set`{Oid`}]],'_:_['name.AttributeName,
    '"Handle".String]]]],'<_:_|_>['head@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_['eSuperTypes.ReferenceName,
    'part@devsmm.Oid],'_:_['eStructuralFeatures.ReferenceName,'empty.Set`{Oid`}]],'_:_['name.AttributeName,
    '"Head".String]]]],'<_:_|_>['defective@part@devsmm.Oid,'EAttribute.EAttribute,'_`,_['_`,_['_`,_['_:_[
    'lowerBound.AttributeName,'s_['0.Zero]],'_:_['upperBound.AttributeName,'s_['0.Zero]]],'_:_[
    'eType.ReferenceName,'Boolean.OclType]],'_:_['name.AttributeName,'"deffective".String]]]],'<_:_|_>[
    'part@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_['eSuperTypes.ReferenceName,'positionedEl@devsmm.Oid],'_:_[
    'eStructuralFeatures.ReferenceName,'defective@part@devsmm.Oid]],'_:_['name.AttributeName,'"Part".String]]]],
    '<_:_|_>['outParts@conveyor@devsmm.Oid,'EReference.EReference,'_`,_['_`,_['_`,_['_`,_['_`,_['_:_[
    'containment.AttributeName,'true.Bool],'_:_['eOpposite.ReferenceName,'null.OclVoid]],'_:_[
    'upperBound.AttributeName,'*.Nat]],'_:_['lowerBound.AttributeName,'0.Zero]],'_:_['eType.ReferenceName,
    'part@devsmm.Oid]],'_:_['name.AttributeName,'"outParts".String]]]],'<_:_|_>['conveyor@devsmm.Oid,
    'EClass.EClass,'_`,_['_`,_['_:_['eSuperTypes.ReferenceName,'limitedContainer@devsmm.Oid],'_:_[
    'eStructuralFeatures.ReferenceName,'outParts@conveyor@devsmm.Oid]],'_:_['name.AttributeName,
    '"Conveyor".String]]]],'<_:_|_>['tray@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_['eSuperTypes.ReferenceName,
    'limitedContainer@devsmm.Oid],'_:_['eStructuralFeatures.ReferenceName,'empty.Set`{Oid`}]],'_:_[
    'name.AttributeName,'"Tray".String]]]],'<_:_|_>['user@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_[
    'eSuperTypes.ReferenceName,'container@devsmm.Oid],'_:_['eStructuralFeatures.ReferenceName,
    'empty.Set`{Oid`}]],'_:_['name.AttributeName,'"User".String]]]],'<_:_|_>[
    'capacity@limitedContainer@devsmm.Oid,'EAttribute.EAttribute,'_`,_['_`,_['_`,_['_:_[
    'lowerBound.AttributeName,'s_['0.Zero]],'_:_['upperBound.AttributeName,'s_['0.Zero]]],'_:_[
    'eType.ReferenceName,'Int.OclType]],'_:_['name.AttributeName,'"capacity".String]]]],'<_:_|_>[
    'limitedContainer@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_['eSuperTypes.ReferenceName,
    'container@devsmm.Oid],'_:_['eStructuralFeatures.ReferenceName,'capacity@limitedContainer@devsmm.Oid]],'_:_[
    'name.AttributeName,'"LimitedContainer".String]]]],'<_:_|_>['parts@container@devsmm.Oid,
    'EReference.EReference,'_`,_['_`,_['_`,_['_`,_['_`,_['_:_['upperBound.AttributeName,'*.Nat],'_:_[
    'eOpposite.ReferenceName,'null.OclVoid]],'_:_['lowerBound.AttributeName,'0.Zero]],'_:_[
    'containment.AttributeName,'true.Bool]],'_:_['eType.ReferenceName,'part@devsmm.Oid]],'_:_[
    'name.AttributeName,'"els".String]]]],'<_:_|_>['container@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_[
    'eSuperTypes.ReferenceName,'positionedEl@devsmm.Oid],'_:_['eStructuralFeatures.ReferenceName,
    'parts@container@devsmm.Oid]],'_:_['name.AttributeName,'"Container".String]]]],'<_:_|_>[
    'genHandle@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_['eSuperTypes.ReferenceName,'generator@devsmm.Oid],
    '_:_['eStructuralFeatures.ReferenceName,'empty.Set`{Oid`}]],'_:_['name.AttributeName,
    '"GenHandle".String]]]],'<_:_|_>['genHead@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_[
    'eSuperTypes.ReferenceName,'generator@devsmm.Oid],'_:_['eStructuralFeatures.ReferenceName,
    'empty.Set`{Oid`}]],'_:_['name.AttributeName,'"GenHead".String]]]],'<_:_|_>['assemble@devsmm.Oid,
    'EClass.EClass,'_`,_['_`,_['_:_['eSuperTypes.ReferenceName,'machine@devsmm.Oid],'_:_[
    'eStructuralFeatures.ReferenceName,'empty.Set`{Oid`}]],'_:_['name.AttributeName,'"Assemble".String]]]],
    '<_:_|_>['generator@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_['eSuperTypes.ReferenceName,
    'machine@devsmm.Oid],'_:_['eStructuralFeatures.ReferenceName,'empty.Set`{Oid`}]],'_:_['name.AttributeName,
    '"Generator".String]]]],'<_:_|_>['out@machine@devsmm.Oid,'EReference.EReference,'_`,_['_`,_['_`,_['_`,_[
    '_:_['eType.ReferenceName,'limitedContainer@devsmm.Oid],'_:_['containment.AttributeName,'false.Bool]],'_:_[
    'upperBound.AttributeName,'s_['0.Zero]]],'_:_['lowerBound.AttributeName,'s_['0.Zero]]],'_:_[
    'name.AttributeName,'"out".String]]]],'<_:_|_>['in@machine@devsmm.Oid,'EReference.EReference,'_`,_['_`,_[
    '_`,_['_`,_['_:_['eType.ReferenceName,'limitedContainer@devsmm.Oid],'_:_['containment.AttributeName,
    'false.Bool]],'_:_['upperBound.AttributeName,'s_['0.Zero]]],'_:_['lowerBound.AttributeName,'0.Zero]],'_:_[
    'name.AttributeName,'"in".String]]]],'<_:_|_>['defectiverate@machine@devsmm.Oid,'EAttribute.EAttribute,
    '_`,_['_`,_['_`,_['_:_['eType.ReferenceName,'Int.OclType],'_:_['upperBound.AttributeName,'s_['0.Zero]]],
    '_:_['lowerBound.AttributeName,'s_['0.Zero]]],'_:_['name.AttributeName,'"defectiverate".String]]]],'<_:_|_>[
    'pt@machine@devsmm.Oid,'EAttribute.EAttribute,'_`,_['_`,_['_`,_['_:_['eType.ReferenceName,'Int.OclType],
    '_:_['upperBound.AttributeName,'s_['0.Zero]]],'_:_['lowerBound.AttributeName,'s_['0.Zero]]],'_:_[
    'name.AttributeName,'"pt".String]]]],'<_:_|_>['machine@devsmm.Oid,'EClass.EClass,'_`,_['_`,_['_:_[
    'eSuperTypes.ReferenceName,'positionedEl@devsmm.Oid],'_:_['eStructuralFeatures.ReferenceName,'_`,_[
    'pt@machine@devsmm.Oid,'_`,_['defectiverate@machine@devsmm.Oid,'_`,_['in@machine@devsmm.Oid,
    'out@machine@devsmm.Oid]]]]],'_:_['name.AttributeName,'"Machine".String]]]],'<_:_|_>['els@plant@devsmm.Oid,
    'EReference.EReference,'_`,_['_`,_['_`,_['_`,_['_`,_['_:_['upperBound.AttributeName,'*.Nat],'_:_[
    'eOpposite.ReferenceName,'null.OclVoid]],'_:_['lowerBound.AttributeName,'0.Zero]],'_:_[
    'containment.AttributeName,'true.Bool]],'_:_['eType.ReferenceName,'positionedEl@devsmm.Oid]],'_:_[
    'name.AttributeName,'"els".String]]]],'<_:_|_>['positionedEl@devsmm.Oid,'EClass.EClass,'_`,_['_:_[
    'name.AttributeName,'"PositionedEl".String],'_:_['eStructuralFeatures.ReferenceName,'empty.Set`{Oid`}]]]],
    '<_:_|_>['plant@devsmm.Oid,'EClass.EClass,'_`,_['_:_['name.AttributeName,'"Plant".String],'_:_[
    'eStructuralFeatures.ReferenceName,'els@plant@devsmm.Oid]]]] [none] .
  eq 'rtmm#param.Model = '__['__['__['__['__['__['C:Configuration,'<_:_|_>['Request:Oid,'EClass.EClass,
    'Atts3:AttributeSet]],'<_:_|_>['Reqsts@Queue:Oid,'EReference.EReference,'_`,_['_`,_['_`,_['_`,_[
    'Atts6:AttributeSet,'_:_['containment.AttributeName,'true.Bool]],'_:_['eType.ReferenceName,'Request:Oid]],
    '_:_['upperBound.AttributeName,'*.Nat]],'_:_['lowerBound.AttributeName,'0.Zero]]]],'<_:_|_>['Queue:Oid,
    'EClass.EClass,'_`,_['Atts2:AttributeSet,'_:_['eStructuralFeatures.ReferenceName,'_`,_['Reqsts@Queue:Oid,
    'Oids2:Set`{Oid`}]]]]],'<_:_|_>['Out@Server:Oid,'EReference.EReference,'_`,_['_`,_['_`,_['_`,_[
    'Atts5:AttributeSet,'_:_['containment.AttributeName,'false.Bool]],'_:_['eType.ReferenceName,'Queue:Oid]],
    '_:_['upperBound.AttributeName,'s_['0.Zero]]],'_:_['lowerBound.AttributeName,'s_['0.Zero]]]]],'<_:_|_>[
    'In@Server:Oid,'EReference.EReference,'_`,_['_`,_['_`,_['_`,_['Atts4:AttributeSet,'_:_[
    'containment.AttributeName,'false.Bool]],'_:_['eType.ReferenceName,'Queue:Oid]],'_:_[
    'upperBound.AttributeName,'s_['0.Zero]]],'_:_['lowerBound.AttributeName,'0.Zero]]]],'<_:_|_>['Server:Oid,
    'EClass.EClass,'_`,_['Atts1:AttributeSet,'_:_['eStructuralFeatures.ReferenceName,'_`,_['In@Server:Oid,'_`,_[
    'Out@Server:Oid,'Oids1:Set`{Oid`}]]]]]] [nonexec] .
  eq '$card['empty.Set`{Oid`},'C:Nat] = 'C:Nat [none] .
  eq '$card['none.EmptyTypeSet,'C:Nat] = 'C:Nat [none] .
  eq '$card['_;_['E:Qid,'S:QidSet],'C:Nat] = '$card['S:QidSet,'_+N_['C:Nat,'s_['0.Zero]]] [owise] .
  eq '$card['_;_['N:NeQidSet,'N:NeQidSet,'S:QidSet],'C:Nat] = '$card['_;_['N:NeQidSet,'S:QidSet],'C:Nat] [none]
    .
  eq '$card['_`,_['E:Oid,'S:Set`{Oid`}],'C:Nat] = '$card['S:Set`{Oid`},'_+N_['C:Nat,'s_['0.Zero]]] [owise] .
  eq '$card['_`,_['N:NeSet`{Oid`},'N:NeSet`{Oid`},'S:Set`{Oid`}],'C:Nat] = '$card['_`,_['N:NeSet`{Oid`},
    'S:Set`{Oid`}],'C:Nat] [none] .
  eq '$diff['empty.Set`{Oid`},'S':Set`{Oid`},'A:Set`{Oid`}] = 'A:Set`{Oid`} [none] .
  eq '$diff['none.EmptyTypeSet,'S':QidSet,'A:QidSet] = 'A:QidSet [none] .
  eq '$diff['_;_['E:Qid,'S:QidSet],'S':QidSet,'A:QidSet] = '$diff['S:QidSet,'S':QidSet,'if_then_else_fi['_in_[
    'E:Qid,'S':QidSet],'A:QidSet,'_;_['E:Qid,'A:QidSet]]] [none] .
  eq '$diff['_`,_['E:Oid,'S:Set`{Oid`}],'S':Set`{Oid`},'A:Set`{Oid`}] = '$diff['S:Set`{Oid`},'S':Set`{Oid`},
    'if_then_else_fi['_in_['E:Oid,'S':Set`{Oid`}],'A:Set`{Oid`},'_`,_['E:Oid,'A:Set`{Oid`}]]] [none] .
  eq '$intersect['empty.Set`{Oid`},'S':Set`{Oid`},'A:Set`{Oid`}] = 'A:Set`{Oid`} [none] .
  eq '$intersect['none.EmptyTypeSet,'S':QidSet,'A:QidSet] = 'A:QidSet [none] .
  eq '$intersect['_;_['E:Qid,'S:QidSet],'S':QidSet,'A:QidSet] = '$intersect['S:QidSet,'S':QidSet,
    'if_then_else_fi['_in_['E:Qid,'S':QidSet],'_;_['E:Qid,'A:QidSet],'A:QidSet]] [none] .
  eq '$intersect['_`,_['E:Oid,'S:Set`{Oid`}],'S':Set`{Oid`},'A:Set`{Oid`}] = '$intersect['S:Set`{Oid`},
    'S':Set`{Oid`},'if_then_else_fi['_in_['E:Oid,'S':Set`{Oid`}],'_`,_['E:Oid,'A:Set`{Oid`}],'A:Set`{Oid`}]] [
    none] .
  eq '$reverse['nil.NatList,'A:NatList] = 'A:NatList [none] .
  eq '$reverse['nil.TypeList,'A:QidList] = 'A:QidList [none] .
  eq '$reverse['__['E:Nat,'L:NatList],'A:NatList] = '$reverse['L:NatList,'__['E:Nat,'A:NatList]] [none] .
  eq '$reverse['__['E:Qid,'L:QidList],'A:QidList] = '$reverse['L:QidList,'__['E:Qid,'A:QidList]] [none] .
  eq '$size['nil.NatList,'C:Nat] = 'C:Nat [none] .
  eq '$size['nil.TypeList,'C:Nat] = 'C:Nat [none] .
  eq '$size['__['E:Nat,'L:NatList],'C:Nat] = '$size['L:NatList,'_+N_['C:Nat,'s_['0.Zero]]] [none] .
  eq '$size['__['E:Qid,'L:QidList],'C:Nat] = '$size['L:QidList,'_+N_['C:Nat,'s_['0.Zero]]] [none] .
  eq '-I_['_//_['I:NzInt,'N:NzNat]] = '_//_['-I_['I:NzInt],'N:NzNat] [none] .
  eq '_*N_['0.Zero,'Q:NzRat] = '0.Zero [none] .
  eq '_*N_['K:Int,'_//_['I:NzInt,'N:NzNat]] = '_//_['_*N_['I:NzInt,'K:Int],'N:NzNat] [none] .
  eq '_*N_['_//_['I:NzInt,'N:NzNat],'_//_['J:NzInt,'M:NzNat]] = '_//_['_*N_['I:NzInt,'J:NzInt],'_*N_['N:NzNat,
    'M:NzNat]] [none] .
  eq '_+N_['K:Int,'_//_['I:NzInt,'N:NzNat]] = '_//_['_+N_['I:NzInt,'_*N_['N:NzNat,'K:Int]],'N:NzNat] [none] .
  eq '_+N_['_//_['I:NzInt,'N:NzNat],'_//_['J:NzInt,'M:NzNat]] = '_//_['_+N_['_*N_['I:NzInt,'M:NzNat],'_*N_[
    'J:NzInt,'N:NzNat]],'_*N_['N:NzNat,'M:NzNat]] [none] .
  eq '_-N_['K:Int,'_//_['J:NzInt,'M:NzNat]] = '_//_['_-N_['_*N_['M:NzNat,'K:Int],'J:NzInt],'M:NzNat] [none] .
  eq '_-N_['_//_['I:NzInt,'N:NzNat],'K:Int] = '_//_['_-N_['I:NzInt,'_*N_['N:NzNat,'K:Int]],'N:NzNat] [none] .
  eq '_-N_['_//_['I:NzInt,'N:NzNat],'_//_['J:NzInt,'M:NzNat]] = '_//_['_-N_['_*N_['I:NzInt,'M:NzNat],'_*N_[
    'J:NzInt,'N:NzNat]],'_*N_['N:NzNat,'M:NzNat]] [none] .
  eq '_//_['0.Zero,'Q:NzRat] = '0.Zero [none] .
  eq '_//_['I:NzInt,'-I_['N:NzNat]] = '_//_['-I_['I:NzInt],'N:NzNat] [none] .
  eq '_//_['I:NzInt,'_//_['J:NzInt,'M:NzNat]] = '_//_['_*N_['I:NzInt,'M:NzNat],'J:NzInt] [none] .
  eq '_//_['_//_['I:NzInt,'N:NzNat],'J:NzInt] = '_//_['I:NzInt,'_*N_['J:NzInt,'N:NzNat]] [none] .
  eq '_//_['_//_['I:NzInt,'N:NzNat],'_//_['J:NzInt,'M:NzNat]] = '_//_['_*N_['I:NzInt,'M:NzNat],'_*N_['J:NzInt,
    'N:NzNat]] [none] .
  eq '_;_['A:Assignment,'A:Assignment] = 'A:Assignment [none] .
  eq '_;_['N:NeQidSet,'N:NeQidSet] = 'N:NeQidSet [none] .
  eq '_;_['T:TypeList,'T:TypeList] = 'T:TypeList [none] .
  eq '_<=N_['K:Int,'_//_['J:NzInt,'M:NzNat]] = '_<=N_['_*N_['M:NzNat,'K:Int],'J:NzInt] [none] .
  eq '_<=N_['_//_['I:NzInt,'N:NzNat],'K:Int] = '_<=N_['I:NzInt,'_*N_['N:NzNat,'K:Int]] [none] .
  eq '_<=N_['_//_['I:NzInt,'N:NzNat],'_//_['J:NzInt,'M:NzNat]] = '_<=N_['_*N_['I:NzInt,'M:NzNat],'_*N_['J:NzInt,
    'N:NzNat]] [none] .
  eq '_<N_['K:Int,'_//_['J:NzInt,'M:NzNat]] = '_<N_['_*N_['M:NzNat,'K:Int],'J:NzInt] [none] .
  eq '_<N_['_//_['I:NzInt,'N:NzNat],'K:Int] = '_<N_['I:NzInt,'_*N_['N:NzNat,'K:Int]] [none] .
  eq '_<N_['_//_['I:NzInt,'N:NzNat],'_//_['J:NzInt,'M:NzNat]] = '_<N_['_*N_['I:NzInt,'M:NzNat],'_*N_['J:NzInt,
    'N:NzNat]] [none] .
  eq '_=`[_`]_['X:Float,'Z:FiniteFloat,'Y:Float] = '_<F_['absF['_-F_['X:Float,'Y:Float]],'Z:FiniteFloat] [none]
    .
  eq '_>=N_['K:Int,'_//_['J:NzInt,'M:NzNat]] = '_>=N_['_*N_['M:NzNat,'K:Int],'J:NzInt] [none] .
  eq '_>=N_['_//_['I:NzInt,'N:NzNat],'K:Int] = '_>=N_['I:NzInt,'_*N_['N:NzNat,'K:Int]] [none] .
  eq '_>=N_['_//_['I:NzInt,'N:NzNat],'_//_['J:NzInt,'M:NzNat]] = '_>=N_['_*N_['I:NzInt,'M:NzNat],'_*N_['J:NzInt,
    'N:NzNat]] [none] .
  eq '_>N_['K:Int,'_//_['J:NzInt,'M:NzNat]] = '_>N_['_*N_['M:NzNat,'K:Int],'J:NzInt] [none] .
  eq '_>N_['_//_['I:NzInt,'N:NzNat],'K:Int] = '_>N_['I:NzInt,'_*N_['N:NzNat,'K:Int]] [none] .
  eq '_>N_['_//_['I:NzInt,'N:NzNat],'_//_['J:NzInt,'M:NzNat]] = '_>N_['_*N_['I:NzInt,'M:NzNat],'_*N_['J:NzInt,
    'N:NzNat]] [none] .
  eq '_\_['S:QidSet,'N:NeQidSet] = '$diff['S:QidSet,'N:NeQidSet,'none.EmptyTypeSet] [none] .
  eq '_\_['S:QidSet,'none.EmptyTypeSet] = 'S:QidSet [none] .
  eq '_\_['S:Set`{Oid`},'N:NeSet`{Oid`}] = '$diff['S:Set`{Oid`},'N:NeSet`{Oid`},'empty.Set`{Oid`}] [none] .
  eq '_\_['S:Set`{Oid`},'empty.Set`{Oid`}] = 'S:Set`{Oid`} [none] .
  eq '_^_['_//_['I:NzInt,'N:NzNat],'Z:Nat] = '_//_['_^_['I:NzInt,'Z:Nat],'_^_['N:NzNat,'Z:Nat]] [none] .
  eq '__['A:Attr,'A:Attr] = 'A:Attr [none] .
  eq '__['E:Equation,'E:Equation] = 'E:Equation [none] .
  eq '__['M:MembAx,'M:MembAx] = 'M:MembAx [none] .
  eq '__['O:OpDecl,'O:OpDecl] = 'O:OpDecl [none] .
  eq '__['O:OpMapping,'O:OpMapping] = 'O:OpMapping [none] .
  eq '__['R:Rule,'R:Rule] = 'R:Rule [none] .
  eq '__['S:SortMapping,'S:SortMapping] = 'S:SortMapping [none] .
  eq '__['S:SubsortDecl,'S:SubsortDecl] = 'S:SubsortDecl [none] .
  eq '_`,_['N:NeSet`{Oid`},'N:NeSet`{Oid`}] = 'N:NeSet`{Oid`} [none] .
  eq '_and-then_['false.Bool,'B:`[FindResult`,NatList`,Bound`,OclInvalid`]] = 'false.Bool [none] .
  eq '_and-then_['true.Bool,'B:`[FindResult`,NatList`,Bound`,OclInvalid`]] =
    'B:`[FindResult`,NatList`,Bound`,OclInvalid`] [none] .
  eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
  eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,'B:Bool],'_and_['A:Bool,'C:Bool]] [none] .
  eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
  eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
  eq '_divides_['Q:NzRat,'_//_['J:NzInt,'M:NzNat]] = '_divides_['_*N_['Q:NzRat,'M:NzNat],'J:NzInt] [none] .
  eq '_divides_['_//_['I:NzInt,'N:NzNat],'K:Int] = '_divides_['I:NzInt,'_*N_['N:NzNat,'K:Int]] [none] .
  eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,'B:Bool]]] [none] .
  eq '_in_['E:Oid,'S:Set`{Oid`}] = 'false.Bool [owise] .
  eq '_in_['E:Oid,'_`,_['E:Oid,'S:Set`{Oid`}]] = 'true.Bool [none] .
  eq '_in_['E:Qid,'S:QidSet] = 'false.Bool [owise] .
  eq '_in_['E:Qid,'_;_['E:Qid,'S:QidSet]] = 'true.Bool [none] .
  eq '_or-else_['false.Bool,'B:`[FindResult`,NatList`,Bound`,OclInvalid`]] =
    'B:`[FindResult`,NatList`,Bound`,OclInvalid`] [none] .
  eq '_or-else_['true.Bool,'B:`[FindResult`,NatList`,Bound`,OclInvalid`]] = 'true.Bool [none] .
  eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_['A:Bool,'B:Bool]] [none] .
  eq '_psubset_['S:QidSet,'S':QidSet] = '_and-then_['_=/=_['S:QidSet,'S':QidSet],'_subset_['S:QidSet,
    'S':QidSet]] [none] .
  eq '_psubset_['S:Set`{Oid`},'S':Set`{Oid`}] = '_and-then_['_=/=_['S:Set`{Oid`},'S':Set`{Oid`}],'_subset_[
    'S:Set`{Oid`},'S':Set`{Oid`}]] [none] .
  eq '_quo_['K:Int,'_//_['J:NzInt,'M:NzNat]] = '_quo_['_*N_['M:NzNat,'K:Int],'J:NzInt] [none] .
  eq '_quo_['_//_['I:NzInt,'N:NzNat],'Q:NzRat] = '_quo_['I:NzInt,'_*N_['Q:NzRat,'N:NzNat]] [none] .
  eq '_rem_['K:Int,'_//_['J:NzInt,'M:NzNat]] = '_//_['_rem_['_*N_['M:NzNat,'K:Int],'J:NzInt],'M:NzNat] [none] .
  eq '_rem_['_//_['I:NzInt,'N:NzNat],'J:NzInt] = '_//_['_rem_['I:NzInt,'_*N_['J:NzInt,'N:NzNat]],'N:NzNat] [
    none] .
  eq '_rem_['_//_['I:NzInt,'N:NzNat],'_//_['J:NzInt,'M:NzNat]] = '_//_['_rem_['_*N_['I:NzInt,'M:NzNat],'_*N_[
    'J:NzInt,'N:NzNat]],'_*N_['N:NzNat,'M:NzNat]] [none] .
  eq '_subset_['empty.Set`{Oid`},'S':Set`{Oid`}] = 'true.Bool [none] .
  eq '_subset_['none.EmptyTypeSet,'S':QidSet] = 'true.Bool [none] .
  eq '_subset_['_;_['E:Qid,'S:QidSet],'S':QidSet] = '_and-then_['_in_['E:Qid,'S':QidSet],'_subset_['S:QidSet,
    'S':QidSet]] [none] .
  eq '_subset_['_`,_['E:Oid,'S:Set`{Oid`}],'S':Set`{Oid`}] = '_and-then_['_in_['E:Oid,'S':Set`{Oid`}],'_subset_[
    'S:Set`{Oid`},'S':Set`{Oid`}]] [none] .
  eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
  eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
  eq '`[_`]['Q:Qid] = 'th_is_sorts_._____endth['Q:Qid,'including_.['Q:Qid],'none.EmptyTypeSet,
    'none.SubsortDeclSet,'none.OpDeclSet,'none.MembAxSet,'none.EquationSet,'none.RuleSet] [none] .
  eq 'abs['_//_['I:NzInt,'N:NzNat]] = '_//_['abs['I:NzInt],'N:NzNat] [none] .
  eq 'append['A:NatList,'L:NatList] = '__['A:NatList,'L:NatList] [none] .
  eq 'append['A:QidList,'L:QidList] = '__['A:QidList,'L:QidList] [none] .
  eq 'cardinality['eOpposite.ReferenceName] = '<_`,_>['0.Zero,'s_['0.Zero]] [none] .
  eq 'cardinality['eStructuralFeatures.ReferenceName] = '<_`,_>['0.Zero,'*.Nat] [none] .
  eq 'cardinality['eSuperTypes.ReferenceName] = '<_`,_>['0.Zero,'*.Nat] [none] .
  eq 'cardinality['eType.ReferenceName] = '<_`,_>['0.Zero,'s_['0.Zero]] [none] .
  eq 'ceilingR['K:Int] = 'K:Int [none] .
  eq 'ceilingR['_//_['N:NzNat,'M:NzNat]] = '_quo_['_-N_['_+N_['N:NzNat,'M:NzNat],'s_['0.Zero]],'M:NzNat] [none]
    .
  eq 'ceilingR['_//_['-I_['N:NzNat],'M:NzNat]] = '-I_['floorR['_//_['N:NzNat,'M:NzNat]]] [none] .
  eq 'delete['E:Oid,'S:Set`{Oid`}] = 'S:Set`{Oid`} [owise] .
  eq 'delete['E:Oid,'_`,_['E:Oid,'S:Set`{Oid`}]] = 'delete['E:Oid,'S:Set`{Oid`}] [none] .
  eq 'delete['E:Qid,'S:QidSet] = 'S:QidSet [owise] .
  eq 'delete['E:Qid,'_;_['E:Qid,'S:QidSet]] = 'delete['E:Qid,'S:QidSet] [none] .
  eq 'first['<_`,_>['XVar:Nat,'YVar:Nat]] = 'XVar:Nat [none] .
  eq 'flatten['Conf:Configuration] = 'flatten['Conf:Configuration,'none.Configuration] [none] .
  eq 'flatten['Conf1:Configuration,'Conf2:Configuration] = '__['Conf1:Configuration,'Conf2:Configuration] [
    owise] .
  eq 'floorR['K:Int] = 'K:Int [none] .
  eq 'floorR['_//_['N:NzNat,'M:NzNat]] = '_quo_['N:NzNat,'M:NzNat] [none] .
  eq 'floorR['_//_['-I_['N:NzNat],'M:NzNat]] = '-I_['ceilingR['_//_['N:NzNat,'M:NzNat]]] [none] .
  eq 'frac['K:Int] = '0.Zero [none] .
  eq 'frac['_//_['I:NzInt,'N:NzNat]] = '_//_['_rem_['I:NzInt,'N:NzNat],'N:NzNat] [none] .
  eq 'front['__['L:NatList,'E:Nat]] = 'L:NatList [none] .
  eq 'front['__['L:QidList,'E:Qid]] = 'L:QidList [none] .
  eq 'gcd['R:Rat,'_//_['I:NzInt,'N:NzNat]] = '_//_['gcd['I:NzInt,'_*N_['N:NzNat,'R:Rat]],'N:NzNat] [none] .
  eq 'getContext['`{_`,_`,_`,_`}['T:Term,'T:Type,'S:Substitution,'C:Context]] = 'C:Context [none] .
  eq 'getContext['`{_`,_`}['S:Substitution,'C:Context]] = 'C:Context [none] .
  eq 'getEqs['fmod_is_sorts_.____endfm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet]] = 'EQS:EquationSet [none] .
  eq 'getEqs['fth_is_sorts_.____endfth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet]] = 'EQS:EquationSet [none] .
  eq 'getEqs['mod_is_sorts_._____endm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'EQS:EquationSet [none] .
  eq 'getEqs['th_is_sorts_._____endth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'EQS:EquationSet [none] .
  eq 'getFrom['view_from_to_is__endv['Q:Qid,'ME:ModuleExpression,'ME':ModuleExpression,'SMS:SortMappingSet,
    'OMS:OpMappingSet]] = 'ME:ModuleExpression [none] .
  eq 'getImports['fmod_is_sorts_.____endfm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet]] = 'IL:ImportList [none] .
  eq 'getImports['fth_is_sorts_.____endfth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet]] = 'IL:ImportList [none] .
  eq 'getImports['mod_is_sorts_._____endm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'IL:ImportList [none] .
  eq 'getImports['th_is_sorts_._____endth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'IL:ImportList [none] .
  eq 'getMbs['fmod_is_sorts_.____endfm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet]] = 'MAS:MembAxSet [none] .
  eq 'getMbs['fth_is_sorts_.____endfth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet]] = 'MAS:MembAxSet [none] .
  eq 'getMbs['mod_is_sorts_._____endm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'MAS:MembAxSet [none] .
  eq 'getMbs['th_is_sorts_._____endth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'MAS:MembAxSet [none] .
  eq 'getName['C:Constant] = 'qid['substr['string['C:Constant],'0.Zero,'rfind['string['C:Constant],'".".Char,
    'length['string['C:Constant]]]]] [none] .
  eq 'getName['V:Variable] = 'qid['substr['string['V:Variable],'0.Zero,'rfind['string['V:Variable],'":".Char,
    'length['string['V:Variable]]]]] [none] .
  eq 'getName['fmod_is_sorts_.____endfm['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet]] = 'Q:Qid [none] .
  eq 'getName['fmod_is_sorts_.____endfm['_`{_`}['Q:Qid,'PDL:ParameterDeclList],'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet]] = 'Q:Qid [none] .
  eq 'getName['fth_is_sorts_.____endfth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet]] = 'Q:Qid [none] .
  eq 'getName['mod_is_sorts_._____endm['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'Q:Qid [none] .
  eq 'getName['mod_is_sorts_._____endm['_`{_`}['Q:Qid,'PDL:ParameterDeclList],'IL:ImportList,'SS:SortSet,
    'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'Q:Qid [none] .
  eq 'getName['th_is_sorts_._____endth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'Q:Qid [none] .
  eq 'getName['view_from_to_is__endv['Q:Qid,'ME:ModuleExpression,'ME':ModuleExpression,'SMS:SortMappingSet,
    'OMS:OpMappingSet]] = 'Q:Qid [none] .
  eq 'getOpMappings['view_from_to_is__endv['Q:Qid,'ME:ModuleExpression,'ME':ModuleExpression,
    'SMS:SortMappingSet,'OMS:OpMappingSet]] = 'OMS:OpMappingSet [none] .
  eq 'getOps['fmod_is_sorts_.____endfm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet]] = 'OPDS:OpDeclSet [none] .
  eq 'getOps['fth_is_sorts_.____endfth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet]] = 'OPDS:OpDeclSet [none] .
  eq 'getOps['mod_is_sorts_._____endm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'OPDS:OpDeclSet [none] .
  eq 'getOps['th_is_sorts_._____endth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'OPDS:OpDeclSet [none] .
  eq 'getRls['fmod_is_sorts_.____endfm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet]] = 'none.RuleSet [none] .
  eq 'getRls['fth_is_sorts_.____endfth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet]] = 'none.RuleSet [none] .
  eq 'getRls['mod_is_sorts_._____endm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'RLS:RuleSet [none] .
  eq 'getRls['th_is_sorts_._____endth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'RLS:RuleSet [none] .
  eq 'getSortMappings['view_from_to_is__endv['Q:Qid,'ME:ModuleExpression,'ME':ModuleExpression,
    'SMS:SortMappingSet,'OMS:OpMappingSet]] = 'SMS:SortMappingSet [none] .
  eq 'getSorts['fmod_is_sorts_.____endfm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet]] = 'SS:SortSet [none] .
  eq 'getSorts['fth_is_sorts_.____endfth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet]] = 'SS:SortSet [none] .
  eq 'getSorts['mod_is_sorts_._____endm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'SS:SortSet [none] .
  eq 'getSorts['th_is_sorts_._____endth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,'OPDS:OpDeclSet,
    'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'SS:SortSet [none] .
  eq 'getSubsorts['fmod_is_sorts_.____endfm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet]] = 'SSDS:SubsortDeclSet [none] .
  eq 'getSubsorts['fth_is_sorts_.____endfth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet]] = 'SSDS:SubsortDeclSet [none] .
  eq 'getSubsorts['mod_is_sorts_._____endm['H:Header,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'SSDS:SubsortDeclSet [none] .
  eq 'getSubsorts['th_is_sorts_._____endth['Q:Qid,'IL:ImportList,'SS:SortSet,'SSDS:SubsortDeclSet,
    'OPDS:OpDeclSet,'MAS:MembAxSet,'EQS:EquationSet,'RLS:RuleSet]] = 'SSDS:SubsortDeclSet [none] .
  eq 'getSubstitution['`{_`,_`,_`,_`}['T:Term,'T:Type,'S:Substitution,'C:Context]] = 'S:Substitution [none] .
  eq 'getSubstitution['`{_`,_`,_`}['T:Term,'T:Type,'S:Substitution]] = 'S:Substitution [none] .
  eq 'getSubstitution['`{_`,_`}['S:Substitution,'C:Context]] = 'S:Substitution [none] .
  eq 'getTerm['`{_`,_`,_`,_`}['T:Term,'T:Type,'S:Substitution,'C:Context]] = 'T:Term [none] .
  eq 'getTerm['`{_`,_`,_`}['T:Term,'T:Type,'S:Substitution]] = 'T:Term [none] .
  eq 'getTerm['`{_`,_`}['T:Term,'T:Type]] = 'T:Term [none] .
  eq 'getTo['view_from_to_is__endv['Q:Qid,'ME:ModuleExpression,'ME':ModuleExpression,'SMS:SortMappingSet,
    'OMS:OpMappingSet]] = 'ME':ModuleExpression [none] .
  eq 'getType['C:Constant] = 'qid['substr['string['C:Constant],'_+N_['s_['0.Zero],'rfind['string['C:Constant],
    '".".Char,'length['string['C:Constant]]]],'length['string['C:Constant]]]] [none] .
  eq 'getType['V:Variable] = 'qid['substr['string['V:Variable],'_+N_['s_['0.Zero],'rfind['string['V:Variable],
    '":".Char,'length['string['V:Variable]]]],'length['string['V:Variable]]]] [none] .
  eq 'getType['`{_`,_`,_`,_`}['T:Term,'T:Type,'S:Substitution,'C:Context]] = 'T:Type [none] .
  eq 'getType['`{_`,_`,_`}['T:Term,'T:Type,'S:Substitution]] = 'T:Type [none] .
  eq 'getType['`{_`,_`}['T:Term,'T:Type]] = 'T:Type [none] .
  eq 'hasSuperTypes['Atts1:AttributeSet,'Conf:Configuration] = 'false.Bool [owise] .
  eq 'hasSuperTypes['_`,_['Atts1:AttributeSet,'_:_['eSuperTypes.ReferenceName,'_`,_['O1:Oid,
    'Oids1:Set`{Oid`}]]],'__['Conf:Configuration,'<_:_|_>['O1:Oid,'C:Cid,'Atts2:AttributeSet]]] = 'true.Bool [
    none] .
  eq 'head['__['E:Nat,'L:NatList]] = 'E:Nat [none] .
  eq 'head['__['E:Qid,'L:QidList]] = 'E:Qid [none] .
  eq 'insert['E:Oid,'S:Set`{Oid`}] = '_`,_['E:Oid,'S:Set`{Oid`}] [none] .
  eq 'insert['E:Qid,'S:QidSet] = '_;_['E:Qid,'S:QidSet] [none] .
  eq 'intersection['S:QidSet,'N:NeQidSet] = '$intersect['S:QidSet,'N:NeQidSet,'none.EmptyTypeSet] [none] .
  eq 'intersection['S:QidSet,'none.EmptyTypeSet] = 'none.EmptyTypeSet [none] .
  eq 'intersection['S:Set`{Oid`},'N:NeSet`{Oid`}] = '$intersect['S:Set`{Oid`},'N:NeSet`{Oid`},'empty.Set`{Oid`}]
    [none] .
  eq 'intersection['S:Set`{Oid`},'empty.Set`{Oid`}] = 'empty.Set`{Oid`} [none] .
  eq 'isContainment['R:ReferenceName] = 'false.Bool [owise] .
  eq 'isContainment['eStructuralFeatures.ReferenceName] = 'true.Bool [none] .
  eq 'isReference['A:AttributeName] = 'false.Bool [none] .
  eq 'isReference['A:ReferenceName] = 'true.Bool [none] .
  eq 'last['__['L:NatList,'E:Nat]] = 'E:Nat [none] .
  eq 'last['__['L:QidList,'E:Qid]] = 'E:Qid [none] .
  eq 'lcm['R:Rat,'_//_['I:NzInt,'N:NzNat]] = '_//_['lcm['I:NzInt,'_*N_['N:NzNat,'R:Rat]],'N:NzNat] [none] .
  eq 'max['R:Rat,'_//_['I:NzInt,'N:NzNat]] = '_//_['max['I:NzInt,'_*N_['N:NzNat,'R:Rat]],'N:NzNat] [none] .
  eq 'metaPrettyPrint['M:Module,'T:Term] = 'metaPrettyPrint['M:Module,'T:Term,'__['mixfix.PrintOption,'__[
    'flat.PrintOption,'__['format.PrintOption,'__['number.PrintOption,'rat.PrintOption]]]]] [none] .
  eq 'min['R:Rat,'_//_['I:NzInt,'N:NzNat]] = '_//_['min['I:NzInt,'_*N_['N:NzNat,'R:Rat]],'N:NzNat] [none] .
  eq 'mixFeatures['O1:Oid,'SFS1:Set`{Oid`},'Conf:Configuration] = 'Conf:Configuration [owise] .
  eq 'mixFeatures['O1:Oid,'SFS1:Set`{Oid`},'__['Conf:Configuration,'<_:_|_>['O2:Oid,'EClass.EClass,'_`,_[
    'Atts1:AttributeSet,'_:_['eSuperTypes.ReferenceName,'_`,_['O1:Oid,'Oids1:Set`{Oid`}]],'_:_[
    'eStructuralFeatures.ReferenceName,'SFS2:Set`{Oid`}]]]]] = '__['<_:_|_>['O2:Oid,'EClass.EClass,'_`,_['_`,_[
    'Atts1:AttributeSet,'_:_['eStructuralFeatures.ReferenceName,'_`,_['SFS1:Set`{Oid`},'SFS2:Set`{Oid`}]]],'_:_[
    'eSuperTypes.ReferenceName,'_`,_['O1:Oid,'Oids1:Set`{Oid`}]]]],'mixFeatures['O1:Oid,'SFS1:Set`{Oid`},
    'Conf:Configuration]] [print('"mixing - " 'SFS1:Set`{Oid`} '" and " 'SFS2:Set`{Oid`} '" within object "
    'O2:Oid)] .
  eq 'mmatch['ModQid:Qid,'System:Configuration,'Param:Configuration] = 'metaMatch['upModule['ModQid:Qid,
    'false.Bool],'upTerm['System:Configuration],'upTerm['Param:Configuration],'nil.EqCondition,'0.Zero] [none] .
  eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
  eq 'occurs['E:Nat,'nil.NatList] = 'false.Bool [none] .
  eq 'occurs['E:Nat,'__['E':Nat,'L:NatList]] = 'if_then_else_fi['_==_['E:Nat,'E':Nat],'true.Bool,'occurs['E:Nat,
    'L:NatList]] [none] .
  eq 'occurs['E:Qid,'nil.TypeList] = 'false.Bool [none] .
  eq 'occurs['E:Qid,'__['E':Qid,'L:QidList]] = 'if_then_else_fi['_==_['E:Qid,'E':Qid],'true.Bool,'occurs['E:Qid,
    'L:QidList]] [none] .
  eq 'reverse['L:NatList] = '$reverse['L:NatList,'nil.NatList] [none] .
  eq 'reverse['L:QidList] = '$reverse['L:QidList,'nil.TypeList] [none] .
  eq 'second['<_`,_>['XVar:Nat,'YVar:Nat]] = 'YVar:Nat [none] .
  eq 'size['L:NatList] = '$size['L:NatList,'0.Zero] [none] .
  eq 'size['L:QidList] = '$size['L:QidList,'0.Zero] [none] .
  eq 'tail['__['E:Nat,'L:NatList]] = 'L:NatList [none] .
  eq 'tail['__['E:Qid,'L:QidList]] = 'L:QidList [none] .
  eq 'trunc['K:Int] = 'K:Int [none] .
  eq 'trunc['_//_['I:NzInt,'N:NzNat]] = '_quo_['I:NzInt,'N:NzNat] [none] .
  eq 'union['S:QidSet,'S':QidSet] = '_;_['S:QidSet,'S':QidSet] [none] .
  eq 'union['S:Set`{Oid`},'S':Set`{Oid`}] = '_`,_['S:Set`{Oid`},'S':Set`{Oid`}] [none] .
  eq '|_|['S:QidSet] = '$card['S:QidSet,'0.Zero] [none] .
  eq '|_|['S:Set`{Oid`}] = '$card['S:Set`{Oid`},'0.Zero] [none] .
  ceq 'flatten['__['Conf1:Configuration,'<_:_|_>['O1:Oid,'EClass.EClass,'_`,_['Atts1:AttributeSet,'_:_[
    'eStructuralFeatures.ReferenceName,'SFS1:Set`{Oid`}]]]],'Conf2:Configuration] = 'if_then_else_fi['_=/=_[
    'SFS1:Set`{Oid`},'empty.Set`{Oid`}],'flatten['mixFeatures['O1:Oid,'SFS1:Set`{Oid`},'Conf1:Configuration],
    '__['Conf2:Configuration,'<_:_|_>['O1:Oid,'EClass.EClass,'_`,_['Atts1:AttributeSet,'_:_[
    'eStructuralFeatures.ReferenceName,'SFS1:Set`{Oid`}]]]]],'flatten['Conf1:Configuration,'__[
    'Conf2:Configuration,'<_:_|_>['O1:Oid,'EClass.EClass,'_`,_['Atts1:AttributeSet,'_:_[
    'eStructuralFeatures.ReferenceName,'SFS1:Set`{Oid`}]]]]]] if 'not_['hasSuperTypes['Atts1:AttributeSet,
    'Conf1:Configuration]] = 'true.Bool [print('O1:Oid '" --- " 'SFS1:Set`{Oid`} '"\n :: Configuration 1 is "
    'Conf1:Configuration '"\n :: Configuration 2 is " 'Conf2:Configuration)] .
  none
endm, 
'<_:_|_>['machine@devsmm.Oid,'EClass.EClass,'_`,_['_:_['name.AttributeName,
    '"Machine".String],'_:_['eSuperTypes.ReferenceName,'positionedEl@devsmm.Oid],'_:_[
    'eStructuralFeatures.ReferenceName,'_`,_['pt@machine@devsmm.Oid,'defectiverate@machine@devsmm.Oid,
    'in@machine@devsmm.Oid,'out@machine@devsmm.Oid]]]],
'<_:_|_>['Server:Oid,'EClass.EClass,'_`,_['Atts1:AttributeSet,'_:_[
    'eStructuralFeatures.ReferenceName,'_`,_['In@Server:Oid,'Out@Server:Oid,'Oids1:Set`{Oid`}]]]],
nil, 
0) .



eof

---- test-2
red mmatch(
    'TEST-PLS-MATCHING,
    < machine@devsmm : EClass | name : "Machine", eSuperTypes : positionedEl@devsmm,
                                eStructuralFeatures : (pt@machine@devsmm, 
                                                       defectiverate@machine@devsmm, 
                                                       in@machine@devsmm,
                                                       out@machine@devsmm) >
    < pt@machine@devsmm : EAttribute | name : "pt", lowerBound : 1, upperBound : 1, eType : Int >
    < defectiverate@machine@devsmm : EAttribute | name : "defectiverate", lowerBound : 1, upperBound : 1, eType : Int >
    < in@machine@devsmm : EReference | name : "in", lowerBound : 0, upperBound : 1, 
                                       eType : limitedContainer@devsmm, containment : false >
    < out@machine@devsmm : EReference | name : "out", lowerBound : 1, upperBound : 1,
                                        eType : limitedContainer@devsmm, containment : false >
    < generator@devsmm : EClass | name : "Generator", eSuperTypes : machine@devsmm, eStructuralFeatures : empty >,
    < Server:Oid : EClass | eStructuralFeatures : (In@Server:Oid, Out@Server:Oid, Oids1:Set{Oid}), Atts1:AttributeSet >
    < In@Server:Oid : EReference | lowerBound : 0, upperBound : 1, eType : Queue:Oid, containment : false, Atts4:AttributeSet >
    < Out@Server:Oid : EReference | lowerBound : 1, upperBound : 1, eType : Queue:Oid, containment : false, Atts5:AttributeSet >) .