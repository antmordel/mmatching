-- @path Maude=/MaudeMetamodel/Maude.ecore
-- @nsURI Ecore=http://www.eclipse.org/emf/2002/Ecore

-- @author Antonio Moreno-Delgado <i>amoreno@lcc.uma.es</i>
-- @date Sep 11th 2014
-- 
-- 
--   This file is part of MMatching.
--
--   MMatching is free software: you can redistribute it and/or modify it
--   under the terms of the GNU General Public License as published by the
--   Free Software Foundation, either version 3 of the License, or (at your
--   option) any later version.
-- 
--   MMatching is distributed in the hope that it will be useful, but
--   WITHOUT ANY WARRANTY; without even the implied warranty of
--   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
--   General Public License for more details.
--
--   You should have received a copy of the GNU General Public License along
--   with MMatching. If not, see <http://www.gnu.org/licenses/>.
 
-- This transformation works with models with one and only one EPackage instance.

module Ecore2Maude;
create OUT: Maude from IN: Ecore;

helper def: mSpec: Maude!MaudeSpec =
	OclUndefined;

helper def: sMod: Maude!SModule =
	OclUndefined;

helper def: oidSort: Maude!Sort =
	OclUndefined;

helper def: modelSort: Maude!Sort =
	OclUndefined;

helper def: objectSyntax: String =
	'<_:_|_>';

helper def: classType: String =
	'EClass';

helper def: refType: String =
	'EReference';

helper def: emptySyntax: String =
	'__';

helper def: sfsSyntax: String =
	'_:_';

helper def: sfsSetSyntax: String =
	'_,_';

helper def: metamodelName(): String =
	Ecore!EPackage.allInstancesFrom('IN') -> first().name.toUpper();

helper context Ecore!EClass def: className(): String =
	(self.name.toLower() + '@' + self.ePackage.name.toLower()).regexReplaceAll('_', '@-@');

helper context Ecore!EStructuralFeature def: sfName(): String =
	(self.name.toLower() + '@' + self.eContainingClass.name.toLower() + '@' + 
			self.eContainingClass.ePackage.name.toLower()).regexReplaceAll('_', '@-@');

helper context Ecore!EPackage def: modelName(): String =
	self.name.toLower();

--- This helper returns a string operator with so many
--- '_' as arguments the term has.
helper context Maude!RecTerm def: getSetSyntaxOperation(): String =
	if self.args -> size() > 1 then
		'('.concat(self.getEmptySyntaxOperation()).concat(')')
	else
		'(_)'
	endif;

helper context Maude!RecTerm def: getEmptySyntaxOperation(): String =
	if self.args -> size() > 1 then
		''.concat(self.args -> subSequence(1, self.args -> size() - 1) -> collect(aux | '_')).
				concat(',_').replaceAll('[', ' ').replaceAll(']', ' ').trim()
	else
		if self.args -> size() = 1 then
			'_'
		else
			' '
		endif
	endif;

entrypoint rule Initialize() {
	to
		mSpec: Maude!MaudeSpec (
			els <- Sequence{},
			printableEls <- Sequence{}
		),
		m: Maude!SModule (
			name <- thisModule.metamodelName(),
			els <- Sequence{}
		),
		-- Importation the MMATCHING module
		modImportationClasses: Maude!ModImportation (
			mode <- #protecting,
			imports <- modMMatching,
			"module" <- m
		),
		modMMatching: Maude!ModuleIdModExp (
			"module" <- mmatchingModule
		),
		mmatchingModule: Maude!SModule (
			name <- 'MMATCHING',
			els <- Sequence{}
		),
		oidsort: Maude!Sort (
			name <- 'Oid'
		),
		modelSort: Maude!Sort (
			name <- 'Model'
		)
	do {
		thisModule.mSpec <- mSpec;		
		thisModule.mSpec.els <- thisModule.mSpec.els -> including(m);
    thisModule.sMod <- m;
    thisModule.oidSort <- oidsort;
    thisModule.modelSort <- modelSort;
	}
}

rule Class2Maude {
	from
		class: Ecore!EClass
	using {
		className: String = class.className();
	}
	to
		sort: Maude!Sort (
			name <- className,
			"module" <- thisModule.sMod
		),
		ssort: Maude!SubsortRel (
			"module" <- thisModule.sMod,
			supersorts <- thisModule.oidSort,
			subsorts <- Set{sort}
		),
		operation: Maude!Operation (
			name <- className,
			"module" <- thisModule.sMod,
			coarity <- class,
			atts <- Sequence{'ctor'}
		)
}

rule InheritanceRelations {
	from
		classA: Ecore!EClass,
		classB: Ecore!EClass
			(classB.eSuperTypes -> includes(classA))
	to
		subsort: Maude!SubsortRel (
			"module" <- thisModule.sMod,
			supersorts <- classA,
			subsorts <- classB
		)
}

rule SFS2Op {
	from
		sf: Ecore!EStructuralFeature
	to
		op: Maude!Operation (
			"module" <- thisModule.sMod,
			name <- sf.sfName(),
			coarity <- thisModule.oidSort,
			atts <- Sequence{'ctor'}
		)
}

rule GenerateTerm {
	from
		model: Ecore!EPackage
	using {
		modelName: String = model.modelName();
		allClasses: Sequence(Ecore!EClass) = model.eClassifiers -> select(ecl | ecl.
				oclIsTypeOf(Ecore!EClass));
	}
	to
		op: Maude!Operation (
			"module" <- thisModule.sMod,
			name <- modelName,
			coarity <- thisModule.modelSort,
			atts <- Sequence{'ctor'}
		),
		eq: Maude!Equation (
			"module" <- thisModule.sMod,
			lhs <- lhsConstant,
			rhs <- rhs
		),
		lhsConstant: Maude!Constant (
			op <- modelName
		),
		rhs: Maude!RecTerm (
			args <- allClasses -> collect(class | thisModule.CreateObjectTermFromClass(class))
					-> append(allClasses -> collect(cl | cl.eStructuralFeatures) -> flatten() ->
					select(esfs | esfs.oclIsTypeOf(Ecore!EReference)) -> collect(ref | thisModule.
					CreateObjectTermFromReference(ref))) -> flatten()
		)
	do {
		rhs.op <- rhs.getEmptySyntaxOperation().regexReplaceAll(',', '');
	}
}

lazy rule CreateObjectTermFromClass {
	from
		class: Ecore!EClass
	to
		objectTerm: Maude!RecTerm (
			op <- thisModule.objectSyntax,
			args <- Sequence{className,
						classType,
						thisModule.CreateSFSFromClass(class)}
		),
		className: Maude!Constant (
			op <- class.className()
		),
		classType: Maude!Constant (
			op <- thisModule.classType
		)
}

lazy rule CreateSFSFromClass {
	from
		class: Ecore!EClass
	to
		emptySyntax: Maude!RecTerm (
			args <- Sequence{nameSFS,
				if class.eStructuralFeatures->size() > 0
				then thisModule.CreateNoEmptyEStructuralFeatures(class)
				else thisModule.CreateEmptyEStructuralFeatures(class)
				endif,
				if class.eSuperTypes->size()>0
				then thisModule.CreateESuperTypesSFS(class)
				else OclUndefined
				endif}
		),
		-- name
		nameSFS: Maude!RecTerm (
			op <- thisModule.sfsSyntax,
			args <- Sequence{nameConstant,
						nameArg}
		),
		nameConstant: Maude!Constant (
			op <- 'name'
		),
		nameArg: Maude!Constant (
			op <- '"' + class.name + '"'
		)
	do {
		emptySyntax.op <- emptySyntax.getEmptySyntaxOperation();
	}
}

lazy rule CreateEmptyEStructuralFeatures {
	from
		class: Ecore!EClass
	to
	  SFSTerm: Maude!RecTerm (
			op <- thisModule.sfsSyntax,
			args <- Sequence{SFSName,SFSemtpy}
		),
	  SFSName: Maude!Constant (
			op <- 'eStructuralFeatures'
		),
		SFSemtpy: Maude!Constant (
			op <- 'empty'
		)
}

lazy rule CreateESuperTypesSFS {
	from
	  class: Ecore!EClass
	to
		estTerm: Maude!RecTerm (
			op <- thisModule.sfsSyntax,
			args <- Sequence{SFSName,SFSsuperTypes}
		),
		SFSName: Maude!Constant (
			op <- 'eSuperTypes'
		),
		SFSsuperTypes: Maude!RecTerm (
			args <- class.eSuperTypes -> collect(est | thisModule.CreateSupertype(est))
		)
	do {
		SFSsuperTypes.op <- SFSsuperTypes.getSetSyntaxOperation();
	}
}

lazy rule CreateSupertype {
	from
	  stype: Ecore!EClass
	to
		constant: Maude!Constant (
			op <- stype.className()
		)	
}

lazy rule CreateNoEmptyEStructuralFeatures {
	from
	  class: Ecore!EClass
	to
		SFSTerm: Maude!RecTerm (
			op <- thisModule.sfsSyntax,
			args <- Sequence{SFSName,SFSAllFeatures}
		),
		SFSName: Maude!Constant (
			op <- 'eStructuralFeatures'
		),
		SFSAllFeatures: Maude!RecTerm (
			args <- class.eStructuralFeatures -> collect(esf | thisModule.CreateESF(esf))
		)
	do {
		SFSAllFeatures.op <- SFSAllFeatures.getSetSyntaxOperation();
	}
}

lazy rule CreateESF {
	from
		sf: Ecore!EStructuralFeature
	to
		sfMaude: Maude!Constant (
			op <- sf.sfName()
		)
}

lazy rule CreateObjectTermFromReference {
	from
		r: Ecore!EReference
	to
		objectTerm: Maude!RecTerm (
			op <- thisModule.objectSyntax,
			args <- Sequence{refName,
						refType,
						thisModule.CreateSFSFromReference(r)}
		),
		refName: Maude!Constant (
			op <- r.sfName()
		),
		refType: Maude!Constant (
			op <- thisModule.refType
		)
}

lazy rule CreateSFSFromReference {
	from
		r: Ecore!EReference
	to
		emptySyntax: Maude!RecTerm (
			args <- Sequence{nameSFS,typeTerm,containmentTerm,
						lowerBoundTerm,upperBoundTerm,oppositeTerm}
		),
		-- name
		nameSFS: Maude!RecTerm (
			op <- thisModule.sfsSyntax,
			args <- Sequence{nameConstant,
						nameArg}
		),
		nameConstant: Maude!Constant (
			op <- 'name'
		),
		nameArg: Maude!Constant (
			op <- '"' + r.name + '"'
		),
		-- type
		typeTerm: Maude!RecTerm (
			op <- thisModule.sfsSyntax,
			args <- Sequence{typeConstant,
						typeArg}
		),
		typeConstant: Maude!Constant (
			op <- 'eType'
		),
		typeArg: Maude!Constant (
			op <- if r.eType.oclIsTypeOf(Ecore!EClass) then r.eType.className() else 'error' endif
		),
		-- containment
		containmentTerm: Maude!RecTerm (
			op <- thisModule.sfsSyntax,
			args <- Sequence{containmentConstant,
						containmentValue}
		),
		containmentConstant: Maude!Constant (
			op <- 'containment'
		),
		containmentValue: Maude!Constant (
			op <- if r.containment then
					'true'
				else
					'false'
				endif
		),
		-- lowerBound
		lowerBoundTerm: Maude!RecTerm (
			op <- thisModule.sfsSyntax,
			args <- Sequence{lowerBoundConstant,
						lowerBoundValue}
		),
		lowerBoundConstant: Maude!Constant (
			op <- 'lowerBound'
		),
		lowerBoundValue: Maude!Constant (
			op <- if r.lowerBound = -1
			      then '*'
				    else r.lowerBound.toString()
				    endif
		),
		-- upperBound
		upperBoundTerm: Maude!RecTerm (
			op <- thisModule.sfsSyntax,
			args <- Sequence{upperBoundConstant,upperBoundValue}
		),
		upperBoundConstant: Maude!Constant (
			op <- 'upperBound'
		),
		upperBoundValue: Maude!Constant (
			op <- if r.upperBound = -1 then
					'*'
				else
					r.upperBound.toString()
				endif
		),
		-- eOpposite
		oppositeTerm: Maude!RecTerm (
			op <- thisModule.sfsSyntax,
			args <- Sequence{oppositeConstant,oppositeValue}
		),
		oppositeConstant: Maude!Constant (
			op <- 'eOpposite'
		),
		oppositeValue: Maude!Constant (
			op <- if r.eOpposite.oclIsUndefined() then
					'null'
				else
					r.eOpposite.sfName()
				endif
		)
	do {
		emptySyntax.op <- emptySyntax.getEmptySyntaxOperation();
	}
}
